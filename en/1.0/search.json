{"entries":[{"title":"Acquiring API Credentials","baseurl":"","url":"/en/1.0/integration/api-credentials.html","date":null,"categories":[],"body":"Our team uses API method to integrate DiamanteDesk plugins or modules with different content management systems. API stands for Application programming interface, so it is a software-to-software interface that enables different programs to connect and share information between each other. DiamanteDesk API integration serves to create individual customer support systems to all sorts of web portals, on-line stores and blogs. Currently, DiamanteDesk is integrated with Magento , WordPress and PrestaShop content management systems. To connect a content management system and the Client’s CRM, API credentials shall be provided. Getting API Credentials Log in to DiamanteDesk Admin Panel . On the navigation pane select System > User Management > Users . Users screen opens. Click the required user name from the list to open the user profile. Remember the Username and click Generate Key in the API Key field. Copy the generated API key. NOTE: API Key can be generated for any user on the profile screen by the user with Edit permissions. "},{"title":"Branches","baseurl":"","url":"/en/1.0/user-guide/branches.html","date":null,"categories":[],"body":"When a customer of any web service supported by the DiamanteDesk needs to report an issue or submit a request to the help desk team, a ticket is created. Each ticket in DiamanteDesk application has a unique identificator and is sorted according to the branch where it is created or is added to a default branch. Creating separate branches in DiamanteDesk enables our Clients to group tickets according to the requests of specific users, locations, issues or according to the Channel the ticket came from. This feature helps to organize tickets in a way to keep track of the tickets according to a certain category and quickly find them in a system. We remember that good customer service implies quick reaction and problem solving, so we do our best to provide our Clients with a user-friendly tool to make it work. Note: When the ticket is automatically created from the email received at the the support email address, this ticket is created at the branch which is configured as a default one. To learn more about it, please see the Email Processing section. To see the list of all available branches, select the Branches tab at the navigation panel at the top of the home screen. Branch Filters All branches can be filtered according to the Branch Name or Branch Key . Branch key is automatically generated from the branch name when a new branch is created and it should be unique across the system. Branch key must contain only letters. Minimum length is 2 letters. If Branch name consists of more than one word, the system takes the first character of every word and converts them to upper case (for example, Green Daisy - GD, Diamante Desk - DD, etc.). If branch name consists of a single word, branch key is generated from the first 2-4 characters in the upper case (for example, Eltrino - ELTR, bbq - BBQ, etc.). Branch name and Branch Key filters are set to All values by default. To filter the branches according to a certain branch name or key, click the down arrow in the corresponding filed and enter the required name or key. To refresh the results, click Refresh . To clear all filters, click Reset . Create a New Branch Click Create at the right top corner of the Branches screen. Create Branches screen opens. Provide the required information into each field. Not all the fields are required, but the more data you provide, the easier it is to distribute the tickets into the corresponding fields and finding them when they are needed: Field Description Name Required. Provide the name of a new branch in this field. Key Leave a Key field empty as it is automatically filled by the system. Branch Key is generated from the branch name and it should be unique across the system. Default Assignee To select the Assignee , click Unassigned . A Search Panel opens. Next, the following two options are available: you can either start entering the name of the person to be assigned and the system will provide hints with matching results or you can click a list image to open a list of all available assignees. Note: If you have selected a wrong assignee, click the X button next to the name of an assignee. Image Add an image that will serve as a branch logo to the Image field. To do that, click Choose file and select a required image from your local machine. Tags You can also tag your branch. Follow the link to learn more about branch tagging . Provide the description of the branch in the Description filed. Provide the domain name of the support email account (for example, mail.google.com, mail.outlook.com, etc.) in the Support Address field (for example, support@diamantedesk.com ) and the specific user address (for example, support@diamantedesk.com ) in the Customer Domain field. Click Save And Close at the right top corner of the screen. Edit / Delete a Branch Navigate to the Branches screen. Select the branch that shall be edited/deleted from the list of available branches. Note: You can also filter the available branches according to the Branch Name and Branch Key to find a required branch quicker. Click the branch that shall be edited / deleted. The Branch screen opens. Select the corresponding action at the right top of the screen: If you click Edit , perform the necessary changes and click Save or Save and Close . If you click Delete , the following confirmation message is displayed: Note: If a branch is configured as the default for Email Processing , the following message is displayed at the top of the Branch screen. In this case it cannot be deleted. "},{"title":"Contributing","baseurl":"","url":"/en/1.0/developer-guide/contributing.html","date":null,"categories":[],"body":"The DiamanteDesk development team accepts contributions to code and documentation from the community. If you have found a bug, don’t hesitate to let us know about it! We do our best to make DiamanteDesk as easy-to-use and as helpful as possible, so we are thankful for any effort to enhance application’s functionality. Contributing Code When creating DiamanteDesk application and for other projects we work on, we prefer to stick to certain PHP coding standards, described in PSR-0 , PSR-1 , PSR-2 and PSR-4 documentation. This strategy ensures structure quality and easier software maintenance. Therefore, when contributing to DiamanteDesk, please make sure to follow these coding standards. Any contribution can be made as an Issue or Pull Request in the corresponding section of the repository on GitHub . DiamanteDesk functionality is separated into the bundles , such as ApiBindle, FrontBundle, EmbeddedFormBundle, EmailProcessingBundle, etc. When contributing to code or reporting an issue, please select the bundle responsible for specific functionality. Report a Bug If you found a bug: Look through the corresponding section of DiamanteDesk documentation to make sure that a certain feature works incorrectly. Find the relevant bundle on GitHub and check whether the same issue has not been already opened. To report a bug: Create a new issue. Follow this link for detailed instructions on how to create issues on GitHub. Provide a short precise description of the issue in the title. In case there are UI issues, provide screenshots. Describe the steps to reproduce this bug using a recent version of the software. Include the information about your environment. Code Changes To change application code or submit a patch, fork the project on GitHub, perform the required changes, and log a pull request to get the changes pulled back into DiamanteDesk repository. To learn more about pull requests on GitHub, follow this link . Note: When committing changes in the code, add detailed messages on what exactly has been changed. Contributing Documentation DiamanteDesk documentation uses Markdown syntax and Jekyll for generating the documentation in the HTML format. The application documentation, as well as its code, is hosted on Github . You need a GitHub user account to contribute to the documentation. When editing or contributing to documentation, you can either create an Issue on GitHub, describe it and let us know what exactly shall be changed, or you can make changes independently in the same way, described in the Code Changes section. "},{"title":"Email Processing","baseurl":"","url":"/en/1.0/user-guide/channels/email-processing.html","date":null,"categories":[],"body":"DiamanteDesk supports 4 possible options of contacting a service Help Desk team in order to create a new ticket and make a request or report an issue. Any user can do it through a Portal or Embedded Form , over the phone call or by sending an email to the support address. All the emails that get to the support email address are automatically retrieved by the DiamanteDesk system in order to create a separate ticket out of each received letter. To make sure that all customer requests sent to the service support email are automatically converted into tickets by the system, the email processing feature shall be configured at System > Configuration . Configuration To configure email processing functionality, go to System > Configuration . On the System Configuaration pane select the DiamanteDesk menu and Channels tab. The Channels screen opens. Note: All the fields in the Channels tab are required fields but each of them has specific default settings. To use the default settings, select the Use Default check box in the corresponding field. To edit the configurations, clear the the Use Default check box in the corresponding field and specify the necessary value. General In the General section select a default branch for email processing. All the newly created tickets will automatically get to the specified branch and later they can be reassigned to any other branch of your choice. To set a default branch, make sure that the Use Default check box is clear, click the down arrow in the Default branch field and select the required branch from the drop-down list. Note: A branch configured as a default one cannot be deleted. Email Configure the Email section to set up a support email. The following fields may be set to default value or configured according to the Client needs: Server Address. Specify the domain name of the support email account (for example, mail.google.com, mail.outlook.com, etc.) Port. Provide the port number. Hint: It is typically on port 143. But IMAP over SSL is usually on port 993. SSL Specify whether you want to use a secure connection (SSL) when retrieving your mail. Select Yes or No option. Username. Provide the username of a service support email (for example, support@diamantedesk.com ) Password. Provide the password from a support email account. After all the necessary information has been provided, click Save Settings at the right top part of the screen. Run Email Processing You can also run and configure email processing from the console. Two commands are available: using IMAP protocol for email retrieval from a remote email server. php app/console oro:cron:diamante:emailprocessing:general This command may be configured through a crontab, allowing to send polls periodically on a given schedule it’s perfect for retrieving emails from the remote server. or using the email piping method: php app/console diamante:emailprocessing:pipe < /path/to/emails/stream This command is only applicable when DiamanteDesk and email server are installed on the same server machine. It includes piping method which has a remarkable advantage over a IMAP, as, when using piping, all the emails get to the system and are converted into tickets or comments immediately , unlike when using IMAP which sends polls to the remote server within scheduled time (at least 1 minute). This advantage allows to quicky react on customer requests or solve any issues on a real-time basis. "},{"title":"Embedded Form","baseurl":"","url":"/en/1.0/user-guide/channels/embedded-form.html","date":null,"categories":[],"body":"DiamanteDesk is a help desk designed to improve user experience for each of your present and future customers. In complex systems something may always go wrong and any user should always have various options to contact your support team and let them know what should be fixed or changed. DiamanteDesk system offers several options to do that: by sending an email , via a phone call or through a web portal . Some of our Clients also prefer to embed a support form into their website. DiamanteDesk provides functionality for creating embedded forms on the third-party websites. Take a look at the picture below to see the initial form. It can be modified according to the design of your website. This form includes the fields for acquisition of user First Name and Last Name , Email that is going to be used to inform a user on the status of a ticket creation and processing, the Subject field for a short precise description of a request or an issue, the Description field to specify a reason to contact the support team in details and attachment field allowing to add screenshots in case there are any UI issues. After a user clicks the Submit button, the message from the embedded form is automatically converted into a ticket in a specific branch. Create Embedded Form To create a new embedded form, head over to System > Integrations > Embedded Forms and click Create Embedded Form at the right top corner of the screen. Create Embedded Form screen opens. Fill out the fields to add a new embedded form to your website. Note: Required fields are marked with asterisk (*). Field Description Branch Select the branch where all the tickets converted from the embedded form shall be created. This may be a separate branch created specifically for such tickets or a certain website, etc. To learn more about Branches take a look at the corresponding section in DiamanteDesk User Guide. Title Specify the title that is going to be used to refer to current embedded form on the Client website or system. Form Type Currently only one form type is available in the DiamanteDesk application, hence select the Diamante Ticket option from the drop-down list. CSS This field contains default CSS, which corresponds to the initial form design. It can be edited according to the design of your website by changing border width, color, fonts settings, etc. Success Message This message is to be displayed on the website after the successful form submission. It has the following default message: Ticket has been placed successfully. After all the required fields are filled with all the necessary information, click Save and Close or Save at the right top corner of the screen. After the form is saved, it appears in the Embedded Forms grid. Edit / Delete Embedded Form Go to System > Integrations > Embedded Forms . Select the form that shall be edited/deleted from the list of available embedded forms. Click the form that shall be edited / deleted. The Embedded Form screen opens. Select the corresponding action at the right top of the screen: If you click Edit , perform the necessary changes and click Save or Save and Close . If you click Delete , the following confirmation message is displayed: Adding Embedded Form to the Website Go to System > Integrations > Embedded Forms . Open the form that shall be added to the website. Select the Get Code tab to view the source code. Copy the code an add it to your website. "},{"title":"Developer Guide","baseurl":"","url":"/en/1.0/developer-guide/","date":null,"categories":[],"body":"DiamanteDesk application is built using the Open Source software. We greatly appreciate any collaboration with our users and other developers, aimed at making our product better! This section of documentation is aimed at helping the contributors and providing detailed instructions on using DiamanteDesk API methods. Contributing Testing RESTful API guide "},{"title":"Welcome to DiamanteDesk","baseurl":"","url":"/en/1.0/","date":null,"categories":[],"body":" Helps listening to your customers. DiamanteDesk is an independent support ticket system which is designed to listen to your customers and quickly react to satisfy their needs. Currently, it can be easily integrated into the Oro platform but in the short run it will be available for other CRM systems. Our software enables big and small companies to support and guide their customers through emails , websites and phone calls. It is an easy and user-friendly tool designed to create tickets within the CRM and associate them with any customer from the system. In DiamanteDesk tickets can be assigned to specific users and administrators and grouped into Branches in order to organize the workflow and focus on high-priority issues and requests. "},{"title":"Integration","baseurl":"","url":"/en/1.0/integration/","date":null,"categories":[],"body":"Diamantedesk can easily become a help desk for your website, blog or online store by using a plugin or module in the variety of the content management systems. Here is a list of currently supported systems: Magento WordPress PrestaShop API Credentals "},{"title":"Channels","baseurl":"","url":"/en/1.0/user-guide/channels/","date":null,"categories":[],"body":"DiamanteDesk is a customer support system which functions either as a standalone application, extends CRM functionality or can be integrated with a number of content management systems. This software is designed to organize all incoming customer requests from all sources in a single place to ensure quick reply and reasonable solution to a problem, if any. Every user of a service supported by the DiamanteDesk system will have 4 available channels to contact the Help Desk team: by creating a request through a web portal ; via embedded forms on websites, online stores, blogs, etc.; by sending an email notification ; or via a phone call . Currently, first three options are available. Follow the links to learn more about submitting a request through a web portal , embedded forms or about email processing feature. "},{"title":"User Guide","baseurl":"","url":"/en/1.0/user-guide/","date":null,"categories":[],"body":"This documentation section contains the essential information covering all the available DiamanteDesk features and step-by-step instructions on every action performed by the end-user in the system. To learn more about each feature, follow the corresponding link from the list: Branches Tickets Tagging User Management "},{"title":"Installation Guide","baseurl":"","url":"/en/1.0/installation-guide/","date":null,"categories":[],"body":"DiamanteDesk may serve as an independent end-user application or as an extension for OroCRM. In the nearest future it will also be available for other CRMs. This section provides detailed instructions on various options of DiamanteDesk application installation. Requirements DiamanteDesk application was built using Symfony 2.3 framework and Oro Platform; therefore, all the prerequisites listed as Symfony and Oro system requirements also refer to DiamanteDesk. In addition, here is a list of requirements related specifically to the DiamanteDesk application: app/attachments folder needs to be writable; NPM package manager needs to be installed; Grunt needs to be installed (globally); Bower needs to be installed (globally). To install DiamanteDesk you also need to setup MySQL database server with an empty database that will be used later on. You can also check whether your system meets all the requirements from the command line. In order to do that, you should start with getting the application code from Github and installing required libraries . Then you can run the following command: php app/check.php Web Server configuration DiamanteDesk application was developed on the basis of the Symfony standard application so you can learn more about web server configuration recommendations here . Note: DiamanteDesk application makes heavy use of HTTP methods in RESTful calls. The server can be configured to block some of them (for example, PUT, DELETE, etc.). However, this limitation should be removed, otherwise, a certain part of application will not function properly. Composer DiamanteDesk uses Composer to manage package dependencies. Use this link to download it. You should use maximum version 1.0.3. All the following examples are be based on the assumption that the composer have been installed globally. Installation of a Standalone Application Getting the Application Download DiamanteDesk application from GitHub . Clone the GitHub repository to get a source code and checkout the latest developed version of an application. Use the following command: git clone https://github.com/eltrino/diamantedesk-application Previous command was used to get the latest development code stored in the master branch. To obtain the latest stable code and switch to the branch 1.0, issue the following command: git clone -b 1.0 https://github.com/eltrino/diamantedesk-application Also, to obtain the latest stable version, download the application with the composer package manager using the following command: composer create-project diamante/desk-application To install the latest development version using the composer, issue the following command: composer create-project diamante/desk-application:dev-master Installing required libraries Install the dependencies with the composer: composer install Application Installation Installation Using a Console To run the installation of DiamanteDesk in a console mode, use the following command: php diamante:install Additional commands may be required. The system will guide you through the process with questions and command options. If the system configuration does not meet the requirements, the install command provides corresponding messages. In case there are any issues, fix them and run the command again. Installation Using Web Wizard To install the application through a web wizard, follow the link below: http://localhost/install.php When DiamanteDesk installation screen opens, click Begin Installation . Firstly, installation wizard automatically checks system requirements. In case there are any issues, fix them and refresh the page. After all system configurations meet installation requirements, click Next . The next step of installation process is configuring the application. Provide the data for MySQL database connection , Mailer settings , System settings and Websocket connection if the fields are not filled out automatically. Note: If the application is installed for the first time, leave the Drop Full Database check box clear, if you reinstall the application, select this check box. Click Next and the installer will initialize your database. The list of tasks and the progress on their performance will be shown. After you move on to the next step, you should provide such administrative information as company name, link to the application and administrative credentials. Click Install to finish the setup process. After the DiamanteDesk application is successfully installed the following message is displayed: Bundles Installation Development in progress. Oro Marketplace Development in progress. Docker Prebuilt Image To learn more on how to use Docker image, please follow this link . "},{"title":"Magento","baseurl":"","url":"/en/1.0/integration/magento.html","date":null,"categories":[],"body":"Magento is a popular content management system that allows creating powerful e-commerce solutions. As a matter of fact, every e-commerce website should have a reliable support system that helps to quickly solve any issue, build strong customer relationships and improve overall user experience. Integrating DiamanteDesk with a website built with Magento may be the easiest solution for that. DiamanteDesk Magento module allows both administrator and any customer to create, edit and view tickets directly on a Magento e-commerce website. Installing DiamenteDesk Extension After installing DiamanteDesk integration module, it shall be configured at the Magento admin panel. Log in the Magento Admin Panel . In the navigation panel select Systems > Magento Connect > Magento Connect Manager . Re-enter your Magento Administration credentials to verify your permissions. Select automatic or manual installation and complete the following steps: Automatic Installation On the Magento Connect Manager screen follow the Magento Connect link in the Install New Extensions section. The extension marketplace opens. Enter DiamanteDesk in the Search for Extensions field and press Enter. Select the corresponding extension module from the search results. Click Get Extension . Manual Installation Option 1 - Installation via FTP: Upload the addthis folder to the root Magento directory. Head over to the Magento admin area and connect DiamanteDesk and Magento (see the Connecting DiamanteDesk to Magento section). Option 2 - Installation via archive: Download DiamanteDesk Module archive from Github. On the Magento Connect Manager screen, Extensions tab head over to the Direct package file upload section. Select the downloaded DiamanteDesk .zip file from the local machine. Click Upload . Provide your Magento Administration Credentials in the Manage Existing Extensions section below. After all the packages have been uploaded, move to Settings tab, and click Save Settings . Option 3 - Installation via Composer: Add Firegento repository to your composer.json . Add as dependency to your project using composer: composer require eltrino/diamantedesk Note: Make sure that you clear the Magento caches to complete the installation of an extension. To learn more about cache management, follow this link . If the module has been successfully installed, a DiamanteDesk tab will appear next to the System tab in the Magento navigation pane (see the picture below). Connecting DiamanteDesk to Magento After DiamantDesk module has been installed, we need to connect the actual help desk to Magento. In order to do that, complete the following steps: Acquire API credentials from your CRM. Get back to Magento Admin Panel. Go to System > Configuration > DiamanteDesk . DiamanteDesk configuration screen opens. Enter the User Name and Api Key from your CRM. Provide the link to the server in the Server Address field. Click Check Connection to make sure that the connection with a server has been successfully made. If the Api Credentials are correct, a new Branch Configuration field will be added to the DiamanteDesk configuration. Select a default branch from the Branch drop-down list. To learn more about branches in DiamanteDesk, see the Branches section in User Guide. Point out whether the footer link to customer support shall be displayed. Select Yes or No option in the Display footer link field. If the footer link shall be displayed, spcify the footer link URL in the field below. Click Save Config on the right top corner of the screen. "},{"title":"Portal","baseurl":"","url":"/en/1.0/user-guide/channels/portal.html","date":null,"categories":[],"body":"When a customer attempts to leave a request or report an issue through a web site supported by DiamanteDesk, the system redirects this user to a request module at example.com/web/app.php/portal/. A user should register or provide log in details in order to create a ticket. If you are new to the system, complete the following steps for registration: Click Registration at the bottom of the log in screen. Registration screen opens. Provide your first name, last name, email and password in the corresponding fields. Note: Required fields are marked with asterisk (*). Click Continue . After all the provided credentials are successfully saved in a database, the system shows the following message: Check your email box and follow a link to confirm your registration. The system redirects you to a Sign In screen. If you are a registered user: Provide your email address in the Email field. Provide a password in the Password field. Click Sign In . Note: If you forgot your password, complete the following steps: Click Forgot Password under the Email and Password fields. Provide your email address in the Email field. Click Reset Password . The following message appears: Check your email box and follow a link to reset your password. Enter a new password. Click Create New Password . If passport was successfully changed, the system shows the following message: User screen After a user logs into the system, he gets to a User Screen . A newly registered user has an Add a New Ticket option (see below). A previously registered user, who has created requests in past, can look through the table with all the previous requests showing their: Key . Key is an identifier of the branch, where the request has been created. This identifier is automatically generated by taking the first character(s) of every word in brunch name and converting them to upper case (for example, Green Daisy - GD, Retailing - RTL, etc.) Date field displays the date when the request has been created. Subject is a short summary of an issue occurred. Priority field displays the selected priority of the created ticket (Low, Medium or High). Status field indicates the stage of solution (New, Open, Pending, In Progress, Closed, On Hold). Add New Ticket To create a new request, a user shall add a ticket by completing the following steps: Click Add New Ticket at the right corner of the screen. Add New Ticket screen opens. Provide a short summary of a ticket in the Subject field. Type in the detailed description of a ticket in the Description field. Select the priority level of your ticket from the Priority drop-down list. The available options are: Low for a non-urgent request or issue that does not have critical effect on a production process. Medium for an important non-urgent request. High for a critical issue or an urgent request. In case there is a file that shall be attached to the ticket (image or document), click Drop files here to attach and select the required file from your local machine. Once you provided all the necessary information, click Submit . Portal Configuration Tickets can be also created without the required registration. To configure this option, go to System > Configuration . On the System Configuration pane select the DiamanteDesk menu and Channels tab. The Channels screen opens. Configure whether a user shall complete the registration process before creating a new ticket in the Web section. By default, registration is always required. To change this configuration, make sure that the Use Default check box is clear and set the Registration required field to Yes or No option. To save the changes made, click Save Settings on the right top corner of the screen. "},{"title":"PrestaShop","baseurl":"","url":"/en/1.0/integration/prestashop.html","date":null,"categories":[],"body":"PrestaShop is a comprehensive e-commerce platform, allowing any business owner to quickly create an online shop for all sorts of products. But to ensure high quality service and build strong customer relationships, every e-commerce website should have a reliable support system. DiamanteDesk is a perfect solution for that. DiamanteDesk PrestaShop module allows both administrator and any customer to create, edit and view tickets directly on a PrestaShop e-commerce website. All the tickets can be grouped into Branches. To learn more about branches in DiamanteDesk, see the Branches section in User Guide. Installing DiamanteDesk Module Log in the PrestaShop Admin Panel. On the navigation panel head over to Modules > Modules and Themes Catalog for automatic installation. Automatic installation On the Modules screen head over to the PrestaShop Modules List . Enter DiamanteDesk in the Search Plugins field and press Enter. Click Install . Manual installation Option 1 - Installation via FTP: Upload the addthis folder to the modules/ directory. Head over to the PrestaShop admin area and connect DiamanteDesk and PrestaShop (please see the Connecting DiamanteDesk to PrstaShop section). Option 2 - Installation via archive: Download DiamanteDesk module for PrestaShop from Github. On the top right corner of the Modules screen click Add a new module . Select the downloaded zip file from your computer. Click Install Now and activate the plugin. Head over to Add a new module section. Click Choose a file and find a required file on your local machine. Click Upload this module . After the module has been successfully installed, head over to the PrestaShop Modules List . Enter DiamanteDesk in the Search Plugins field and press Enter. Click Install . Note: Make sure that you clear the PrestaShop caches to complete the installation of an extension. Connecting DiamanteDesk to PrstaShop After the module has been successfully installed, the DiamanteDesk module configuration page opens. The module shall be configured for the proper work of a help desk. In order to do that, complete the following steps: Acquire API credentials from your CRM. Get back to DiamanteDesk module configuration page at Prestashop . Provide the link to the server in the Server Address field. Enter the Username and Api Key from your CRM. Click Save . If the credentials are correct and the connection between PrestaShop and DiamanteDesk has been successfully made, a new Default Branch field will be added to the DiamanteDesk configuration. Select a default branch from the drop-down list. Click Save . "},{"title":"RESTful API Guide","baseurl":"","url":"/en/1.0/developer-guide/restful-api-guide.html","date":null,"categories":[],"body":"DiamanteDesk REST APIs enable interaction between the application and other software products, such as websites, CRMs, content management systems and other applications. Using the DiamanteDesk REST APIs you can read, modify, add and delete the data directly in the helpdesk. To ensure secure access it is recommended to use HTTPS protocol for API requests. API Endpoints API endpoints define the connection point to your service, giving the external application access to DiamanteDesk data. API endpoints are prefixed with your domain name: http(s)://domainname/rest/api/{version}/desk/ Authentication DiamanteDesk uses WSSE authentication to ensure secure access to the third party applications via REST APIs. WSSE authentication in DiamanteDesk application, which is based on Symfony, is implemented by using this bundle . WSSE authentication is based on: a username; a nonce (created to avoid replay attacks); a timestamp; the password digest (In DiamanteDesk the password digest is represented as API Key. To learn how to generate API key, please check the API Credentials article in the Integration section of DiamanteDesk documentation). Format All the data in DiamanteDesk APIs is transmitted either in JSON or XML format with JSON being a default format. The format can be specified either: in the request header (Content-Type, Accept). Note: The MIME type shall be specified in header (application/json, application/xml). or specified in the URL. Pagination, Sorting, Filtering Pagination When a user performs a request to get a collection of entities or a certain entity, the data requested is returned in the response body. Depending on the requested items, objects or products, the list of results can contain thousands of results that should be paged through. The number of items per each page can be specified using page parameters. Paginated queries start at page 1 by default. For example, if you set the page limit to 10 items and you need to retrieve items from 21 to 30 your request should contain such parameters: limit=10 and page=3. When a user requests a list of certain entities, the server returns the results along with additional metadata, such as: the general amount of entities, shown at the X-Total HTTP header; the links to the connected pages in the Link HTTP header. There are 4 types of such links: Name Description next The URL to the following results page. last The URL to the last results page. first The URL to the first results page. prev The URL to the previous results page. Take a look at the example, containing such headers: HTTP / 1.1 200 OK Link: <http://hostname/api/rest/latest/desk/branches?limit=25&page=2>; rel=\"next\", <http://hostname/api/rest/latest/desk/branches?limit=25&page=5>; rel=\"last\" X-Total: 110 Sorting The results can be sorted according to the sort and order GET parameters, included in the URL. The sort parameter performs the sorting according to the property name of an entity, order parameter may be set either to asc (ascending) or desc (descending). Filtering Filtering can be performed according to any parameter of the corresponding entity. For example, to filter the branch by its key, add “key=PO” parameter to the URL. If the value is specified for string property, the search is performed for any occurrence, meaning the result will return PO, DPO, DPOD, etc. If the value is specified for numeric property the search is performed for equal value. To filter the results by the time when a certain entity or entities were created or updated, the following parameters should be used: createdBefore createdAfter updatedBefore updatedAfter Error Handling When the fault occurs within the application or on a server side, the server returns the corresponding status code followed by the message, indicating the root cause in the response body. Here are the status codes of the errors that may occur when working with DiamanteDesk application. Status Code Description 400 Validation failed and the request provided by the client was incorrect or distorted and the server could not understand it. 401 Such error occurs when a user attempts to access a page or resource that requires authentication. To resolve this issue, correct log in details shall be provided. 403 Authorization issue, meaning that a user has not been granted permission to access specific page or method. 404 This error means that the server could not process client request with the reason for that described in the error message. 500 Internal server error. This status code indicates that this is not a client-side issue, meaning that the problem occurred on the server side rather than in DiamanteDesk application. Take a look at the example of a 404 error below: POST /diamantedesk-1.0/web/api/rest/latest/desk/branches HTTP/1.1 { \" name\" : \" Test Branch\" , \" description\" : \" Test Description\" , \" tags\" : [ \" Test Tag\" , \" TB1\" ], \" key\" : \" BRANCHTEST\" } HTTP/1.1 404 Not Found { \" error\" : \" Branch key already exists. Please, provide another one.\" } Resources REST APIs are necessary when DiamanteDesk is integrated into another application and when interactions with the DiamanteDesk server shall be scripted. NOTE: Here are the values of the variables API methods: Variable Requirements {version} latest, v1 {_format} xml, json Branches GET: Retrieve the list of all branches GET /api/rest/ { version } /desk/branches Response Status Code: 200 (OK) Response body: [ { \" created_at\" : \" 2015-07-17T11:25:21+0000\" , \" description\" : \" branchDescription1\" , \" id\" : 1 , \" key\" : \" BRANCHB\" , \" name\" : \" branchName1\" , \" updated_at\" : \" 2015-07-17T11:25:21+0000\" }, { \" created_at\" : \" 2015-07-17T11:25:21+0000\" , \" description\" : \" branchDescription2\" , \" id\" : 2 , \" key\" : \" BRANCHC\" , \" name\" : \" branchName2\" , \" updated_at\" : \" 2015-07-17T11:25:21+0000\" } ] GET: Retrieve a branch by ID GET /api/rest/ { version } /desk/branches/ { id } Response Status Code: 200 (OK) Response body: { \" created_at\" : \" 2015-07-17T11:25:36+0000\" , \" description\" : \" Test Description\" , \" id\" : 11 , \" key\" : \" BRANCHTEST\" , \" name\" : \" Test Branch\" , \" updated_at\" : \" 2015-07-17T11:25:36+0000\" } Status Code: 404 (Not Found) Response body: { \" error\" : \" Branch loading failed. Branch not found.\" } POST: Create a new branch POST /api/rest/ { version } /desk/branches Parameters Name Type Description Note name string Required. Specify the name of a new branch. Minimum length is 2 letters. description string Enter the description of a new branch, if necessary. tags arrey of strings Specify the tags appropriate for the new branch. To learn more about tagging in DiamanteDesk, please check the Tagging section in the User Guide section. key string Enter the key of a new branch. Note that the key should be unique accross the whole system. The branch key must contain only letters. Minimum length is 2 letters. Request example: { \" name\" : \" Test Branch\" , \" description\" : \" Test Description\" , \" tags\" : [ \" Test Tag\" ], \" key\" : \" BRANCHTEST\" } Response Status Code: 201 (Created) Response body: { \" created_at\" : \" 2015-07-17T11:25:36+0000\" , \" description\" : \" Test Description\" , \" id\" : 11 , \" key\" : \" BRANCHTEST\" , \" name\" : \" Test Branch\" , \" tags\" : [ \" Test Tag\" ], \" updated_at\" : \" 2015-07-17T11:25:36+0000\" } PUT, PATCH: Update properties of a certain branch by its ID PUT|PATCH /api/rest/ { version } /desk/branches/ { id } Request example: { \" name\" : \" Test Branch PUT\" , \" description\" : \" Test Description\" , \" tags\" : [ \" Test Tag\" ] } Response Status Code: 200 (OK) Response body: { \" created_at\" : \" 2015-07-17T11:25:36+0000\" , \" description\" : \" Test Description\" , \" id\" : 11 , \" key\" : \" BRANCHTEST\" , \" name\" : \" Test Branch PUT\" , \" tags\" : [ \" Test Tag\" ], \" updated_at\" : \" 2015-07-17T11:25:36+0000\" } DELETE: Delete a branch by ID DELETE /api/rest/ { version } /desk/branches/ { id } Response Status Code: 204 (No Content) Response body: null Tickets GET: Retrieve list of all tickets GET /api/rest/ { version } /desk/tickets Response Status Code: 200 (OK) Response body: [ { \" assignee\" : 1 , \" branch\" : 1 , \" created_at\" : \" 2015-07-17T11:25:21+0000\" , \" id\" : 1 , \" key\" : \" BRANCHB-1\" , \" priority\" : \" medium\" , \" reporter\" : \" oro_1\" , \" source\" : \" phone\" , \" status\" : \" new\" , \" subject\" : \" ticketSubject1\" , \" unique_id\" : { \" id\" : \" 8d5fb1d682fecd97b0f4b6f050e2a8b9\" }, \" updated_at\" : \" 2015-07-17T11:25:21+0000\" }, { \" assignee\" : 1 , \" branch\" : 2 , \" created_at\" : \" 2015-07-17T11:25:21+0000\" , \" id\" : 2 , \" key\" : \" BRANCHC-1\" , \" priority\" : \" medium\" , \" reporter\" : \" oro_1\" , \" source\" : \" phone\" , \" status\" : \" open\" , \" subject\" : \" ticketSubject2\" , \" unique_id\" : { \" id\" : \" 9beddad8ecd692841ea8c8f8910b538b\" }, \" updated_at\" : \" 2015-07-17T11:25:21+0000\" } ] GET: Retrieve the ticket by the given ticket ID GET /api/rest/ { version } /desk/tickets/ { id } Response Status Code: 200 (OK) Response body: { \" attachments\" : [ ], \" branch\" : 1 , \" comments\" : [ ], \" created_at\" : \" 2015-07-17T11:25:47+0000\" , \" description\" : \" Test Description\" , \" id\" : 12 , \" key\" : \" BRANCHB-3\" , \" priority\" : \" medium\" , \" reporter\" : \" oro_1\" , \" source\" : \" phone\" , \" status\" : \" open\" , \" subject\" : \" Test Ticket\" , \" unique_id\" : { \" id\" : \" 4b1573586e00d7760babf2aa0bdb9cdc\" }, \" updated_at\" : \" 2015-07-17T11:25:47+0000\" } Status Code: 404 (OK) Response body: { \" error\" : \" Ticket loading failed, ticket not found.\" } POST: Create a new ticket POST /api/rest/ { version } /desk/tickets Parameters Name Type Description Note branch integer Required. Specify a branch name where the ticket should be created. subject string Required. Enter a short description of a new ticket. description string Required. Enter the detailed description of a new ticket. status string Required. The available statuses are: New , Open , Pending , In progress , Closed and On Hold . priority string Required. Specify the priority of a new ticket. The available options are Low , Medium or High . source string Required. Every service user has 4 available options to contact the Help Desk team: by creating a request through a Web form or through the embedded form on a website (optional), as an Email notification, via a Phone call. Specify the corresponding source of a ticket. reporter string Required. The reporter is an administrator who can create a ticket for any customer. The name of the reporter must contain only letters. Request example: { \" branch\" : 1 , \" subject\" : \" Test Ticket\" , \" description\" : \" Test Description\" , \" status\" : \" open\" , \" priority\" : \" medium\" , \" source\" : \" phone\" , \" reporter\" : \" oro_1\" } Response Status Code: 201 (Created) Response body: { \" attachments\" : [ ], \" branch\" : 1 , \" comments\" : [ ], \" created_at\" : \" 2015-07-17T11:25:47+0000\" , \" description\" : \" Test Description\" , \" id\" : 12 , \" key\" : \" BRANCHB-3\" , \" priority\" : \" medium\" , \" reporter\" : \" oro_1\" , \" source\" : \" phone\" , \" status\" : \" open\" , \" subject\" : \" Test Ticket\" , \" unique_id\" : { \" id\" : \" 4b1573586e00d7760babf2aa0bdb9cdc\" }, \" updated_at\" : \" 2015-07-17T11:25:47+0000\" } PUT, PATCH: Update certain properties of the ticket by ID PUT, PATCH /api/rest/ { version } /desk/tickets/ { id } Request example: { \" subject\" : \" Test Ticket Updated PUT\" } Response Status Code: 200 (OK) Response body: { \" attachments\" : [ ], \" branch\" : 1 , \" comments\" : [ ], \" created_at\" : \" 2015-07-17T11:25:47+0000\" , \" description\" : \" Test Description\" , \" id\" : 12 , \" key\" : \" BRANCHB-3\" , \" priority\" : \" medium\" , \" reporter\" : \" oro_1\" , \" source\" : \" phone\" , \" status\" : \" open\" , \" subject\" : \" Test Ticket Updated PUT\" , \" unique_id\" : { \" id\" : \" 4b1573586e00d7760babf2aa0bdb9cdc\" }, \" updated_at\" : \" 2015-07-17T11:25:47+0000\" } DELETE: Delete the ticket by ID DELETE /api/rest/ { version } /desk/tickets/ { id } Response Status Code: 204 (No Content) Response body: null GET: Retrieve a ticket by the given ticket key GET /api/rest/ { version } /desk/tickets/ { key } Response Status Code: 200 (OK) Response body: { \" attachments\" : [ ], \" branch\" : 1 , \" comments\" : [ ], \" created_at\" : \" 2015-07-17T11:25:47+0000\" , \" description\" : \" Test Description\" , \" id\" : 12 , \" key\" : \" BRANCHB-3\" , \" priority\" : \" medium\" , \" reporter\" : \" oro_1\" , \" source\" : \" phone\" , \" status\" : \" open\" , \" subject\" : \" Test Ticket\" , \" unique_id\" : { \" id\" : \" 4b1573586e00d7760babf2aa0bdb9cdc\" }, \" updated_at\" : \" 2015-07-17T11:25:47+0000\" } Status Code: 404 (Not Found) Response body: } \" error\" : \" Ticket loading failed, ticket not found.\" } PUT, PATCH: Update certain properties of a ticket by the ticket key PUT, PATCH /api/rest/ { version } /desk/tickets/ { key } Request example: { \" subject\" : \" Test Ticket Updated PUT by key\" } Response Status Code: 200 (OK) Response body: { \" attachments\" : [ ], \" branch\" : 1 , \" comments\" : [ ], \" created_at\" : \" 2015-07-17T11:25:47+0000\" , \" description\" : \" Test Description\" , \" id\" : 12 , \" key\" : \" BRANCHB-3\" , \" priority\" : \" medium\" , \" reporter\" : \" oro_1\" , \" source\" : \" phone\" , \" status\" : \" open\" , \" subject\" : \" Test Ticket Updated PUT by key\" , \" unique_id\" : { \" id\" : \" 4b1573586e00d7760babf2aa0bdb9cdc\" }, \" updated_at\" : \" 2015-07-17T11:25:47+0000\" } DELETE: Delete the ticket by the ticket key DELETE /api/rest/ { version } /desk/tickets/ { key } Response Status Code: 204 (No Content) Response body: null GET: Retrieve the list of ticket attachments by ticket ID GET /api/rest/ { version } /desk/tickets/ { id } /attachments Response Status Code: 200 (OK) Response body: [ { \" id\" : 15 , \" created_at\" : \" 2015-07-17T11:25:53+0000\" , \" updated_at\" : \" 2015-07-17T11:25:53+0000\" , \" file\" : { \" url\" : \" http: \\ / \\ /localhost \\ /desk \\ /attachments \\ /download \\ /file \\ /450385ca08c7cfe5b507ad85f3a17428\" , \" filename\" : \" test.jpg\" }, \" thumbnails\" : { \" url\" : \" http: \\ / \\ /localhost \\ /desk \\ /attachments \\ /download \\ /thumbnail \\ /450385ca08c7cfe5b507ad85f3a17428\" , \" filename\" : \" 450385ca08c7cfe5b507ad85f3a17428.png\" } } ] GET: Retrieve ticket attachments by attachment ID GET /api/rest/ { version } /desk/tickets/ { ticketId } /attachments/ { attachmentId } Response Status Code: 200 (OK) Response body: { \" id\" : 15 , \" created_at\" : \" 2015-07-17T11:25:53+0000\" , \" updated_at\" : \" 2015-07-17T11:25:53+0000\" , \" file\" : { \" url\" : \" http: \\ / \\ /localhost \\ /desk \\ /attachments \\ /download \\ /file \\ /450385ca08c7cfe5b507ad85f3a17428\" , \" filename\" : \" test.jpg\" }, \" thumbnails\" : { \" url\" : \" http: \\ / \\ /localhost \\ /desk \\ /attachments \\ /download \\ /thumbnail \\ /450385ca08c7cfe5b507ad85f3a17428\" , \" filename\" : \" 450385ca08c7cfe5b507ad85f3a17428.png\" } } Status Code: 404 (Not Found) Response body: { \" error\" : \" Attachment loading failed. Ticket has no such attachment.\" } POST: Add attachment to the ticket POST /api/rest/ { version } /desk/tickets/ { ticketId } /attachments Request example: { \" attachmentsInput\" : [ { \" filename\" : \" test.jpg\" , \" content\" : \" R0lGODlhAQABAIAAAAUEBAAAACwAAAAAAQABAAACAkQBADs=\" } ] } Response Status Code: 201 (Created) Response body: [ { \" id\" : 15 , \" created_at\" : \" 2015-07-17T11:25:53+0000\" , \" updated_at\" : \" 2015-07-17T11:25:53+0000\" , \" file\" : { \" url\" : \" http: \\ / \\ /localhost \\ /desk \\ /attachments \\ /download \\ /file \\ /450385ca08c7cfe5b507ad85f3a17428\" , \" filename\" : \" test.jpg\" }, \" thumbnails\" : { \" url\" : \" http: \\ / \\ /localhost \\ /desk \\ /attachments \\ /download \\ /thumbnail \\ /450385ca08c7cfe5b507ad85f3a17428\" , \" filename\" : \" 450385ca08c7cfe5b507ad85f3a17428.png\" } } ] DELETE: Remove Attachment from the ticket DELETE /api/rest/ { version } /desk/tickets/ { ticketId } /attachments/ { attachmentId } Response Status Code: 204 (No Content) Response body: null GET: Retrieve personal data based on the provided ticket ID GET /api/rest/ { version } /desk/ticket/ { id } /assignee Response Status Code: 200 (OK) Response body: { \" email\" : \" pol.vova@gmail.com\" , \" name\" : \" asdasd dasdasd\" , \" id\" : \" oro_1\" } Comments GET: Retrieve the list of all comments GET /api/rest/ { version } /desk/comments Response Status Code: 200 (OK) Response body: [ { \" attachments\" : [ ], \" author\" : 1 , \" author_type\" : \" oro\" , \" content\" : \" commentContent1-1\" , \" created_at\" : \" 2015-07-17T11:25:22+0000\" , \" id\" : 1 , \" private\" : false , \" ticket\" : 1 , \" updated_at\" : \" 2015-07-17T11:25:22+0000\" }, { \" attachments\" : [ ], \" author\" : 1 , \" author_type\" : \" oro\" , \" content\" : \" commentContent1-2\" , \" created_at\" : \" 2015-07-17T11:25:22+0000\" , \" id\" : 2 , \" private\" : false , \" ticket\" : 1 , \" updated_at\" : \" 2015-07-17T11:25:22+0000\" } ] GET: Retrieve the comment by the given comment ID GET /api/rest/ { version } /desk/comments/ { id } Response Status Code: 200 (OK) Response body: { \" attachments\" : [ ], \" author\" : 10 , \" author_type\" : \" diamante\" , \" content\" : \" Test Comment\" , \" created_at\" : \" 2015-07-17T11:25:22+0000\" , \" id\" : 101 , \" private\" : false , \" ticket\" : 1 , \" updated_at\" : \" 2015-07-17T11:25:22+0000\" } Status Code: 404 (OK) Response body: { \" error\" : \" Comment loading failed, comment not found.\" } POST: Add a new comment to the ticket. POST /api/rest/ { version } /desk/comments Parameters Name Type Description Note content string Required. Add your comment into this section. ticket integer Required. Provide the ID of a ticket where the comment is added. author string Required. Specify the name of a user who adds the comment to the ticket. The name of an author must contain only letters. ticketStatus string Required. Specify the status of a ticket after the new comment is added to it. The available statuses are: New , Open , Pending , In progress , Closed and On Hold . Request example: { \" content\" : \" Test Comment\" , \" ticket\" : 1 , \" author\" : \" oro_1\" , \" ticketStatus\" : \" new\" } Response Status Code: 201 (Created) Response body: { \" attachments\" : [ ], \" author\" : 1 , \" author_type\" : \" oro\" , \" content\" : \" Test Comment\" , \" created_at\" : \" 2015-07-17T11:25:42+0000\" , \" id\" : 104 , \" private\" : false , \" ticket\" : 1 , \" updated_at\" : \" 2015-07-17T11:25:42+0000\" } PUT, PATCH: Update certain properties of the comment be the comment ID PUT|PATCH /api/rest/ { version } /desk/comments/ { id } Response Status Code: 200 (OK) Request example: { \" content\" : \" Test Comment Updated PUT\" , \" ticketStatus\" : \" closed\" } Response body: { \" attachments\" : [ ], \" author\" : 10 , \" author_type\" : \" diamante\" , \" content\" : \" Test Comment Updated PUT\" , \" created_at\" : \" 2015-07-17T11:25:22+0000\" , \" id\" : 101 , \" private\" : false , \" ticket\" : 1 , \" updated_at\" : \" 2015-07-17T11:25:22+0000\" } DELETE: Delete a ticket comment by the comment ID DELETE /api/rest/ { version } /desk/comments/ { id } Response Status Code: 204 (No Content) Response body: null GET: Retrieve the information about the comment author based on the provided comment ID GET /api/rest/ { version } /desk/comment/ { id } /author Response Status Code: 200 (OK) Response body: { \" email\" : \" pol.vova@gmail.com\" , \" name\" : \" asdasd dasdasd\" , \" id\" : \" oro_1\" } GET: Retrieve all comment attachments GET /api/rest/ { version } /desk/comments/ { id } /attachments Response Status Code: 200 (OK) Response body: [ { \" id\" : 12 , \" created_at\" : \" 2015-07-17T11:25:27+0000\" , \" updated_at\" : \" 2015-07-17T11:25:27+0000\" , \" file\" : { \" url\" : \" http: \\ / \\ /localhost \\ /desk \\ /attachments \\ /download \\ /file \\ /61fcb86ab5a53db412b2f3823f8a20ac\" , \" filename\" : \" test.jpg\" }, \" thumbnails\" : { \" url\" : \" http: \\ / \\ /localhost \\ /desk \\ /attachments \\ /download \\ /thumbnail \\ /61fcb86ab5a53db412b2f3823f8a20ac\" , \" filename\" : \" 61fcb86ab5a53db412b2f3823f8a20ac.png\" } } ] Retrieve comment attachments by the attachment ID GET /api/rest/ { version } /desk/comments/ { commentId } /attachments/ { attachmentId } Response Status Code: 200 (OK) Response body: { \" id\" : 12 , \" created_at\" : \" 2015-07-17T11:25:27+0000\" , \" updated_at\" : \" 2015-07-17T11:25:27+0000\" , \" file\" : { \" url\" : \" http: \\ / \\ /localhost \\ /desk \\ /attachments \\ /download \\ /file \\ /61fcb86ab5a53db412b2f3823f8a20ac\" , \" filename\" : \" test.jpg\" }, \" thumbnails\" : { \" url\" : \" http: \\ / \\ /localhost \\ /desk \\ /attachments \\ /download \\ /thumbnail \\ /61fcb86ab5a53db412b2f3823f8a20ac\" , \" filename\" : \" 61fcb86ab5a53db412b2f3823f8a20ac.png\" } } Status Code: 404 (OK) Response body: { \" error\" : \" Attachment loading failed. Comment has no such attachment.\" } POST: Add attachment to the comment POST /api/rest/ { version } /desk/comments/ { commentId } /attachments Request example: { \" attachmentsInput\" : [ { \" filename\" : \" test.jpg\" , \" content\" : \" R0lGODlhAQABAIAAAAUEBAAAACwAAAAAAQABAAACAkQBADs=\" } ] } Response Status Code: 201 (Created) Response body: [ { \" id\" : 13 , \" created_at\" : \" 2015-07-17T11:25:34+0000\" , \" updated_at\" : \" 2015-07-17T11:25:34+0000\" , \" file\" : { \" url\" : \" http: \\ / \\ /localhost \\ /desk \\ /attachments \\ /download \\ /file \\ /338477dbcd9c4faae7584cda781be854\" , \" filename\" : \" test.jpg\" }, \" thumbnails\" : { \" url\" : \" http: \\ / \\ /localhost \\ /desk \\ /attachments \\ /download \\ /thumbnail \\ /338477dbcd9c4faae7584cda781be854\" , \" filename\" : \" 338477dbcd9c4faae7584cda781be854.png\" } } ] DELETE: Remove the attachment from the comment by the attachment ID DELETE /api/rest/ { version } /desk/comments/ { commentId } /attachments/ { attachmentId } Response Status Code: 204 (No Content) Response body: null Users GET: Retrieve the list of all users GET /api/rest/ { version } /desk/users Response Status Code: 200 (OK) Response body: [ { \" id\" : 1 , \" email\" : \" sdasdasd@asfasf.com\" , \" first_name\" : \" das\" , \" last_name\" : \" dasda\" }, { \" id\" : 2 , \" email\" : \" vladimir.polischuk@eltrino.com\" , \" first_name\" : \" \\u0444\\u0456\\u0432\\u0444\\u0456\\u0432 \" , \" last_name\" : \" \\u0432\\u0444\\u0456\\u0432 \" } POST: Create a new user POST /api/rest/ { version } /desk/users Parameters Name Type Description firstName string Required. Provide the first name of a new user. lastName string Required. Provide the last name of a new user. email string Required. Add an email of a new user. This email is going to be used for email notifications and password recovery. Request example: { \" email\" : \" 1437135532dummy-test-email-address@test-server.local\" , \" firstName\" : \" John\" , \" lastName\" : \" Dou\" } Response Status Code: 201 (Created) Response body: { \" id\" : 11 , \" email\" : \" 1437135532dummy-test-email-address@test-server.local\" , \" first_name\" : \" John\" , \" last_name\" : \" Dou\" } GET: Retrieve user data GET /api/rest/ { version } /desk/users/ { email } / Response Status Code: 200 (OK) Response body: { \" id\" : 11 , \" email\" : \" 1437135532dummy-test-email-address@test-server.local\" , \" first_name\" : \" John\" , \" last_name\" : \" Dou\" } Status Code: 404 (Not Found) Response body: { \" error\" : \" User not found.\" } "},{"title":"Tagging","baseurl":"","url":"/en/1.0/user-guide/tagging.html","date":null,"categories":[],"body":"DiamanteDesk administrators can tag Branches or Tickets in order to label them in a certain way. The process of ticket tagging is identical to branch tagging. The main purpose of tags in DiamanteDesk is to give administrators the ability to easily view similar branches. When two or more branches are given the same tag, administrators can view all branches grouped together. When administrator clicks a certain tag, he can also view every single branch with the same tag. Note: Tags are only visible for system administrators, regular users can not see them. Adding Tags Tags can be added either when a new branch is created or whenever such need arises: On the Branch screen move to Tags field. If no tags have been assigned to this branch, the field is marked as Not tagged . Select an existing tag or create a new one. We add a Business tag as an example. Note: Each branch can be labeled with the unlimited amount of tags. Search by Tags To perform the search by tags, two options are available in the system: Click Search button on the top panel of the screen. A Search drop-box opens. Select the required category from the drop down list (in our case it is Tag ). Enter the tag name and click Go . Click the tag label in on the Branch screen and the search will return all categories, such as branches, accounts and contacts tagged as Business . Select the required category on the left side of the screen (in our case it is Branches ). Now the search displays all the branches tagged as Business . "},{"title":"Testing","baseurl":"","url":"/en/1.0/developer-guide/testing.html","date":null,"categories":[],"body":"Software testing is an essential part of the development process. Deliberate and thorough testing ensures that software will work properly and our Clients will not face unforeseen consequences when using it. DiamanteDesk team pays proper attention to testing, both unit and functional , and we rely heavily on PHPUnit, a software suite designed for testing, which is commonly accepted as an industrial standard for quality assurance. DiamanteDesk application offers all the required tests bundled with the most reliable version of PHPUnit. Unit Testing Unit testing is intended to test individual software components in strict isolation from the live system resources, thus, ensuring application integrity. Unit testing utilizes the “mock” object approach to test the behavior of each component in different cases without affecting any other part of the system. DiamanteDesk Unit Test Suite is available in each bundle and can be run from the command line. The way of calling the PHPUnit binary may vary on your setup. The following examples are be based on the assumption that your PHPUnit is installed globally, the DiamanteDesk application is installed via the Composer, and the source code resides in the vendor/diamante folder of your server’s document root. To run the test suite, issue the following command: bash phpunit -c vendor/diamante/ { BundleName } /phpunit.xml.dist vendor/diamante/ { BundleName } /Tests Note: {BundleName} is a placeholder for a name of the bundle you want to test, e.g. DeskBundle, ApiBundle, FrontBundle, etc. The output consists of the test results, including the general number of tests run, assertions made and the number of failed and skipped tests or tests containing errors. Functional Testing Functional testing is aimed at testing the application integrity within the current setup. Depending on the incoming request parameters it may include the database interaction, file system operation and result processing testing, which is a reason why functional testing is commonly referred to as Integration testing. The best practice for functional testing is using the test database filled with randomly generated test data (also known as fixtures). The testing engine mimics the “real” request via different internal tools and analyzes the systems response. Moreover, the built-in tools allow building complex testing scenarios with different parameters which is a great way to test system behavior and analyze system response on our interaction with different UI elements; for example, when clicking buttons and filling out the forms on the web pages. DiamanteDesk Unit Testing Suite is available by issuing the following command: bash phpunit -c vendor/diamante/ { BundleName } /Tests/Functional/phpunit/xml.dist vendor/diamante/ { BundleName } /Tests/Functional The output of the command execution is similar to the unit testing output. Note: We highly recommend setting up a separate database for the proper software testing. How to Setup Testing Environment Set up your test environment parameters by creating the following file: app/config/parameters_test.yml The structure of this file is similar to your prod environment one. Reinstall DiamanteDesk, using –env=test flag if required (depends on your setup). Please refer to the Installation Manual for more details. Running the Suite of Functional Tests When the command described above is issued, the following happens: There is an option in the configuration file, specifying the default bootstrap.php file, required to inform the application on its environment. The script in that file runs every time you run the test suite. Utilizing this file makes it possible to provide the test database with the test data (fixtures) that shall be processed. When fixtures are being loaded, the existing tables shall be truncated in order to get rid of the data from the previous test. This shall be done every time we run the test suite to ensure getting consistent results. Next, the new set of automatically generated data shall be loaded. Eventually, the test suite launches the first test and continues the process as specified in the phpunit.xml.dist file. Adding New Tests and Test Data DiamanteDesk application is open for contributing, so if you want to add a new functionality to the system, we strongly recommend writing unit/functional tests for your bundle and testing it against the existing code to ensure the app integrity. All the newly added functionality that cannot make it through the test suite can’t get checked into DiamanteDesk. Here are a few rules we follow when testing DiamanteDesk application: Unit tests are placed in the Tests folder of your bundle. Functional tests are placed in the Tests/Functional folder. Each set of tests has it’s own config. Functional test suite is required to have a bootstrap script for correct autoloading. Fixtures are added via placing your data generator class into the DataFixtures/Test folder. Each file name, which contains tests, has to end with Test.php . These simple recommendations enable seamless integration of new tests into the existing test suites. "},{"title":"Tickets","baseurl":"","url":"/en/1.0/user-guide/tickets.html","date":null,"categories":[],"body":"DiamanteDesk is a comprehensive help desk, built using the OpenSource software. This tool is a great way to improve customer experience by easily receiving, reassigning and taking care of any Client requests presented in tickets . Tickets can be viewed and added at: the Branches tab (see Branches section); the All Tickets tab. Ticket Filters All the tickets on this screen can be filtered according to the number of various parameters: 1) A user can view tickets according to the categories they belong to. All tickets category allows viewing all tickets created in the system. My tickets category filters all the tickets created by the account owner. My new tickets category filters all the tickets recently created by the account owner. My open tickets category allows viewing all open tickets created by the account owner. Reported tickets New reported tickets 2) Tickets in each category can be also filtered by the following parameters: Note: Each of the parameters is set to All values by default. To change this value, click the down arrow next to to the specific filter that shall be changed. Filter Description Key Enter the required branch key and click Update . Ticket Key consists of the branch key and ticket sequence number and has next format { branchKey }-{ ticketSequenceNumber }. Subject Provide the summary of a ticket in this field. Branch Select the required branch from the drop-down list and click Update . Assignee To filter the tickets assigned to a specific person, enter the name of that person into the Assignee field. Note: You can’t change this value when looking through the tickets in My tickets and My new tickets categories, the assignee in these categories is always an owner of the account. Priority Set the filter to Low , Medium or High priority. Status Select one or several statuses for ticket filtering. The available statuses are: New , Open , Pending , In progress , Closed and On Hold . Created Select the date range when the tickets could could be updated either from a drop-down calendar or by selecting one of the available variables (Now, today, Start of the week, Start of the month, Start of the quarter, Start of the year). Updated Select the date range when the tickets could could be updated either from a drop-down calendar or by selecting one of the available variables (Now, today, Start of the week, Start of the month, Start of the quarter, Start of the year). Create a New Ticket To create a new ticket, complete the following steps: Click Create Ticket at the top right corner of the screen. Create Ticket screen opens. Select the branch from the drop-down list. Specify the short summary of a ticket in the Subject field. Select the status of a ticket. Select the priority of a ticket. Select the Source of the ticket. Every service user has 4 available options to contact the Help Desk team: by creating a request through a Web form or through the embedded form on a website (optional), as an Email notification, via a Phone call. Select the Reporter from the drop-down list. Reporter is an administrator who can create a ticket for any customer. To select the Assignee , click Unassigned . A Search Panel opens. Start entering the name of the person to be assigned and the system will provide hints with the matching results or click a list image to open a list of all available assignees. In case there is a file that shall be attached to the ticket (image or document), click Choose file in the File filed and select the required file from your local machine. Provide the description of a ticket in the Description field. Click Save or Save and Close at the right top corner of the screen for a corresponding action. Notifications Email Notifications is a DiamantDesk feature that sends automatic emails to the ticket creator and assignee when the ticket is created or its status changes. This way a customer is notified whether his request is being processed. When the ticket is created, a reporter and assignee get the following emails, informing them about ticket branch, subject, priority, status and source: When the status of a ticket changes, the reporter and assignee get the following email, informing them about changes performed and the person responsible for them: Configuring Notifications This functionality can be configured according to the customers’ needs at System > Configuration . On the left side side of the screen on the System configuration pane select Notifications tab in the DiamanteDesk menu. Notifications tab opens. To use the default settings, select the Use Default check box in the Email Notifications field. To edit the configurations, clear the the Use Default check box and set the Enable Email Notifications field to Yes or No option. To save the changes made, click Save Settings on the left top corner of the screen. Server Setup The mailer settings for emails and notifications are usually configured during DiamanteDesk installation. To learn more about the process of installation, navigate to the Installation Guide section of the documentation. To make sure that server parameters are configured correctly or you need to change them, define required configuration details in the app/config/parameters.yml file. If you need more information on how to perform configurations in the app/config/parameters.yml file, follow this link . "},{"title":"User Management","baseurl":"","url":"/en/1.0/user-guide/user-management.html","date":null,"categories":[],"body":"User Management serves to create new users in DiamanteDesk or to review/edit information about the existing ones. Each user has a certain role, access settings and belongs to one of the existing groups, defining his default permissions in the system. To review the list of all users in the system head over to System > User Management > Users : Create a New User To create a new user profile in the DiamanteDesk system, head over to System > User Management > Users and click the Create User button at the right top corner of the screen or go directly to System > User Management > Create User . After you get to the Create User screen, fill out all the required fields in five following sections, that is General , Additional , Groups and Roles , Access Settings , Email synchronization settings . The Owner field is automatically filled with Main value by default. Select the Status of an account - it can be either Active or Inactive . Create a Username and Password that will be used by a newly created user to log in. Re-Enter the password in the following filed to make sure you typed it in correctly. Enter a user Name Prefix , if required (Mr, Ms, etc.) First Name, Middle Name, Last Name Enter a user Name Suffix , if any (for example, Jr., Sr., PMP, etc.) Select the Birthday from the drop-down calendar in the corresponding field. Click the Avatar to select a profile picture from your local machine. Enter the user’s Primary Email in the corresponding field. This email is going to be used for email notifications and password recovery. Click Add Another Email in the Emails field to add additional email in case the primary one is not available for any reason. Email Signature Phone Tags. Tagging functionality is identical throughout the system. To learn more about tagging, follow this link . Provide the Title (position) of a newly created user in the section for Additional information. Select the Groups and Roles the newly created user will belong to. More than one group or role may be selected for one user. Edit User Account To edit user account in the DiamanteDesk system: Go to the list of all users in the system at System > User Management > Users . Select the user account that shall be changed. Perform the required changes. Click Save and Close or Save at the right top corner of the screen. My Account To review your account information, click your username > My User at the right top corner of the screen. My account screen opens. To edit your account information, click Edit at the right top corner of the screen, perform the necessary changes and click Save . User Roles When a new user is created within DiamanteDesk, he is assigned with a certain role that determines a set of his permissions and access rights, defining actions a user is allowed to perform. Each user may have one or several roles. To look through the list of available user roles head over to System > User Management > Roles . Permissions Each role defines the list of actions that may be performed to a certain entity. Action Description View Allows viewing the content of the entity records, grid items. Create Allows creating new records for defined entities. Edit Allows editing entity records, grid items. Delete Allows deleting entity records, grid items. Assign Allows assigning the entity records to a different owner. Permissions may be defined by selecting one of the following options for each entity and the actions that may be performed there. Option Description None None of the users with this role are able to perform the action. User Allows the owner-user to perform the corresponding action. Business Unit Allows all the users within a business unit to perform the action. Division Allows all the users within a division of a business unit to perform the action.. System Allows all the users with the same role to perform the corresponding action. Create a New User Role Navigate to System > User Management > Roles . Click Create Role at the top right corner of the screen. The Create Role screen opens. Provide the role name, preferably defining the group of users, who will be granted certain permissions (for example, Administrators, Users, etc.) in the General tab. Grant certain permissions by selecting the corresponding options for each action in all entities. The Capabilities tab consists of all sorts of functions that may be available for the users. Define what functionalities are available for a user with this role. Users with different roles will see system functionality differently and can perform different actions, accordingly. Choose the existing users that will be granted this role by selecting the check boxes in the corresponding lines. Click Save or Save and Close to proceed. User Groups A user group is a collection of user accounts having the same core responsibilities (for example, Administrators, Marketing, Sales). Each user may belong to one or several groups. To look through the list of available User Groups head over to System > User Management > Groups . Create a New User Group Go to System > User Management > Groups . Click Create Group at the right top corner of the screen. The Create Group screen opens. The Owner field is automatically filled with Main value by default. Provide the general name of the group in the Name field. Choose the members belonging to this group by selecting the check boxes in the corresponding lines. Click Save or Save and Close to proceed. "},{"title":"WordPress","baseurl":"","url":"/en/1.0/integration/wordpress.html","date":null,"categories":[],"body":"DiamanteDesk plugin allows adding support help desk to your blog or website. Any comments from the website may be converted into tickets and grouped into separate branches according to the topic or an account. Installing DiamanteDesk Plugin for WordPress Log in the WordPress Admin Panel. On the navigation panel head over to Plugins > Add New . Automatic installation Go to WordPress Plugin Directory . Enter DiamanteDesk in the Search Plugins field and press Enter. Click Install Now and activate the plugin. Manual installation Option 1 - Installation via FTP: Upload the addthis folder to the /wp-content/plugins/ directory. Activate the plugin through the Plugins screen in your WordPress admin area. Option 2 - Installation via archive: Download DiamanteDesk plugin for WordPress from Github. On the Add Plugin screen click Upload Plugin . Select the downloaded zip file from your computer. Click Install Now . To install the plugin, WordPress needs to access your web server. Enter your FTP credentials to proceed. Note: If you do not remember your credentials, contact your web host. 5. Click Proceed . If the plugin has been successfully installed, you shall see the following message: 6. Click Activate Plugin . Connecting DiamanteDesk to WordPress After the plugin has been successfully installed, the DiamanteDesk menu item shall appear in the Wordpress admin menu. It shall be configured for the proper work of a help desk. In order to do that, complete the following steps: Acquire API credentials from your CRM. Get back to WordPress Admin Panel. Select DiamanteDesk menu item from the WordPress admin menu. DiamanteDesk plugin settings screen opens. Provide the link to the server in the Server Address field. Enter the Username and Api Key from your CRM. Select the number of tickets which is going to be displayed in the admin widget. Click Test Connection to make sure that the connection with a server has been successfully made. If the credentials are correct and the connection between WordPress and DiamanteDesk has been successfully made, a new Default Branch field will be added to the DiamanteDesk configuration. Select a default branch from the drop-down list. Click Save Changes . "}]}