{"entries":[{"title":"Acquiring API Credentials","baseurl":null,"url":"/en/latest/integration/api-credentials.html","date":null,"categories":[],"body":"Our team uses API method to integrate DiamanteDesk plugins or modules with different content management systems. API stands for Application programming interface, so it is a software-to-software interface that enables different programs to connect and share information between each other. DiamanteDesk API integration serves to create individual customer support systems to all sorts of web portals, on-line stores and blogs. Currently, DiamanteDesk is integrated with Magento , WordPress and PrestaShop content management systems. To connect a content management system and the Client’s CRM, API credentials shall be provided. Getting API Credentials Log in to DiamanteDesk Admin Panel . On the navigation pane select System > User Management > Users . Users screen opens. Click the required user name from the list to open the user profile. Remember the Username and click Generate Key in the API Key field. Copy the generated API key. Note: API Key can be generated for any user on the profile screen by the user with Edit permissions. "},{"title":"Branches","baseurl":null,"url":"/en/latest/user-guide/branches.html","date":null,"categories":[],"body":"When a customer of any web service supported by DiamanteDesk needs to report an issue or submit a request to the help desk team, a ticket is created. Each ticket is assigned with a unique ID and is sorted according to the branch where it is created or is added to. Creating separate branches in DiamanteDesk allows grouping tickets according to the requests of specific users, locations, issues or according to the Channel of the ticket. Branch logic helps organizing tickets according to a certain category and helps finding them quickly. Reliable customer service implies quick problem solving, so we provide our Clients with a user-friendly tool making it run like clockwork. This article answers the following questions: How to create a Branch How to edit a Branch How to delete a Branch Note: When the ticket is automatically created from the email received at the the support email address, it is created at the branch which is configured as a default one. To learn more about it, please see the Email Processing section. To see the list of all available branches, select the Branches tab at the navigation panel. Branch Filters All branches can be filtered according to the Branch Name or Branch Key . Branch name and Branch Key filters are set to All values by default. To filter the branches according to a certain branch name or key, click the down arrow in the corresponding field and enter the required name or key. To refresh the results, click Refresh . To clear all filters, click Reset . To learn more about filtering in DiamanteDesk, follow this link . Create a New Branch Click Create Branch at the right top corner of the Branches screen. The Create Branches screen opens. Provide the necessary information in each field. Not all fields are required, but the more data you provide, the easier it is to distribute tickets into the corresponding branches and find them when they are needed: Field Description Name Required. Provide a descriptive name of a new branch. Key Leave a Key field empty as it is automatically filled by the system. Branch key is generated from the branch name and it should be unique across the system. Branch key must contain only letters. Minimum length is 2 letters. If Branch name consists of more than one word, the system takes the first character of every word and converts them to upper case (for example, Green Daisy - GD, Diamante Desk - DD, etc.). If branch name consists of a single word, branch key is generated from the first 2-4 characters in the upper case (for example, Eltrino - ELTR, bbq - BBQ, etc.). Default Assignee To select the Assignee , click Unassigned . A Search Panel opens. Next, the following two options are available: you can either start entering the name of the person to be assigned and the system will provide hints with matching results or you can click a list image to open a list of all available assignees. Note: If you have selected a wrong assignee, click the X button next to the name of the selected assignee. Image Add an image that will serve as a branch logo. Click Choose file and select a required image from your local machine. Tags You can tag your branch. Follow this link to learn more about branch tagging . Provide the description of the branch in the Description field. Edit a Branch Navigate to the Branches screen. Select the branch that shall be edited from the list of available branches. The selected Branch screen opens. Click Edit at the right top corner of the screen: Perform the necassary changes/updates. Click Save or Save and Close for the corresponding action. Delete a Branch Three options of branch deleting are available in DiamanteDesk: deleting a single branch mass deleting deleting branches via API Deleting a Single Branch When attempting to delete a single branch in DiamanteDesk, keep in mind that ALL its tickets are going to be deleted as well. Navigate to the Branches screen. Select the branch that shall be deleted from the list. The selected Branch screen opens. Click Delete at the right top corner of the screen: Note: When attempting to delete a single branch in DiamanteDesk, keep in mind that ALL its tickets are going to be deleted as well. The following confirmation message appears: SCREEN To delete a branch but keep all the tickets in the system, select a corresponding checkbox in the warning message and choose a new branch where all the tickets shall be moved. Note: If a branch is configured as default for Email Processing , it cannot be deleted and the following message is displayed at the top of the Branch screen: Branch Deleting Mass Action Multiple branches can be deleted via mass action functionality in DiamanteDesk. Perform the folllowing steps in order to delete several branches at once: Navigate to the Branches screen. Select several branches that shall be deleted from the list of available branches. Click the Mass Actions button and select the Delete Branches option as shown on the picture below. The Delete Confirmation message opens. Click Delete to proceed or Cancel to return to the Branches screen. Branch cannot be deleted via mass action if it has any tickets. Only the branches without any tickets can be deleted during branch deleting mass action. Deleting Branches through API Branches can also be deleted via the API call. The DiamanteDesk RESTful API guide is available here . Please note that a branch cannot be deleted via API request if it has any tickets. Only the branches without any tickets can be deleted via API request. "},{"title":"Contributing","baseurl":null,"url":"/en/latest/developer-guide/contributing.html","date":null,"categories":[],"body":"The DiamanteDesk development team accepts contributions to code and documentation from the community. If you have found a bug, don’t hesitate to let us know about it! We do our best to make DiamanteDesk as easy-to-use and as helpful as possible, so we are thankful for any effort to enhance application’s functionality. Contributing Code When creating DiamanteDesk application and for other projects we work on, we prefer to stick to certain PHP coding standards, described in PSR-0 , PSR-1 , PSR-2 and PSR-4 documentation. This strategy ensures structure quality and easier software maintenance. Therefore, when contributing to DiamanteDesk, please make sure to follow these coding standards. Any contribution can be made as an Issue or Pull Request in the corresponding section of the repository on GitHub . DiamanteDesk functionality is separated into the bundles , such as ApiBindle, FrontBundle, EmbeddedFormBundle, EmailProcessingBundle, etc. When contributing to code or reporting an issue, please select the bundle responsible for specific functionality. Report a Bug If you found a bug: Look through the corresponding section of DiamanteDesk documentation to make sure that a certain feature works incorrectly. Find the relevant bundle on GitHub and check whether the same issue has not been already opened. To report a bug: Create a new issue. Follow this link for detailed instructions on how to create issues on GitHub. Provide a short precise description of the issue in the title. In case there are UI issues, provide screenshots. Describe the steps to reproduce this bug using a recent version of the software. Include the information about your environment. Code Changes To change application code or submit a patch, fork the project on GitHub, perform the required changes, and log a pull request to get the changes pulled back into DiamanteDesk repository. To learn more about pull requests on GitHub, follow this link . Note: When committing changes in the code, add detailed messages on what exactly has been changed. Contributing Documentation DiamanteDesk documentation uses Markdown syntax and Jekyll for generating the documentation in the HTML format. The application documentation, as well as its code, is hosted on Github . You need a GitHub user account to contribute to the documentation. When editing or contributing to documentation, you can either create an Issue on GitHub, describe it and let us know what exactly shall be changed, or you can make changes independently in the same way, described in the Code Changes section. "},{"title":"Customers","baseurl":null,"url":"/en/latest/user-guide/customers.html","date":null,"categories":[],"body":"Every customer who creates a ticket at the DiamanteDesk portal or sends an email to the support address is automatically added to the help desk customer database. This helps keeping track of all the tickets created by a specific user and monitor general customer activity. To see the list of existing DiamanteDesk customers, open the Customers top menu. Create a New Customer To create a new customer: Navigate to the Customers top menu. The Customers screen opens. Click Create User at the top right corner of the screen. Create Customer screen opens. Provide the same information that would be required to register at the portal or that would have been automatically populated from the email during the email processing: user Email , First Name and Last Name . After all the necessary information has been provided, click Save or Save and Close to add new user to the system. After the user account has been created through the admin panel or via the portal, email owner receives the following email: Customer Account The customer (user) account screen contains general information about the customer, such as name, email and his activity in DiamanteDesk. Field Description Email, First Name, Last name These fields display general information about the account owner. This information is obtained either from an email during email processing, from the provided credentials when the user registers in a portal or if admin user creates customer account in a system. Is Active When this field is marked as active, he can successfully log into DiamanteDesk and may create new tickets or resolve any existing ones. If the user is inactive, he should confirm or change his password to be able to log into the system. The User Activity section of the customer account screen displays the general information about all the tickets created by the user in a system. Mass Actions Mass action allows performing mass operations on the selected rows of the grid. DiamanteDesk offers the following mass actions that can be applied to the customer profiles selected from the grid: Choose the profiles to which mass actions should be applied. The following mass actions are available for customer profiles: Delete Selected Users. Use this action to delete several customer profiles at a time. Keep in mind that in DiamanteDesk, if the customer profile is deleted, the user information is not entirely removed from the system. It is usually marked as deleted and the profile of a deleted customer is removed from the list of existing customers, although the system displays strikethrough customer first and last name at the tickets where he was assigned as a reporter or if he authored any comments as shown on the example below. Force Reset Passwords For Selected Users. This option allows administrators to force certain/all users to change their passwords due to security measures or any other specific reasons. All the selected users receive emails notifying them that they should reset their passwords, providing a link to the page where the password can be changed. "},{"title":"Dashboards","baseurl":null,"url":"/en/latest/user-guide/dashboards.html","date":null,"categories":[],"body":"Dashboard is a progress control panel providing a quick access to the most valuable and constantly changing data of the system. Dashboard data is added to widgets. If needed, several dashboards may be created for different purposes to provide better organization and data clarity. Add new dashboard To add a new dashboard: Click the Dashboard icon at the left corner of the screen. Select Manage Dashboards from the drop-down menu. The Manage Dashboards screen opens . Click Create Dashboard at the top right corner of the screen. At the opened screen, fill out the following fields: Field Description Label Provide the name for this dashboard. If there are several dashboards in the system, make sure that dashboard name clearly describes its purpose. Clone from This option allows copying one of the existing dashboards. For example, when several departments or administrators need separate dashboards where most widgets are similar but several other ones should be different, there is no need to create each widget from scratch. Click the down arrow and select the existing dashboard that shall be cloned. To create a new dashboard from scratch select Blank Dashboard . Owner By default, this field is populated with the account of the administrator currently logged in the system. Click the List button to change a dashboard owner. An owner can manage the dashboard according to the needs of administrators. Click Save or Save and Close at the top right corner of the screen for the corresponding action. After the dashboard is saved, it becomes available by clicking the Dashboards icon at the top left corner of the screen. If it is cloned from another dashboard, it is going to contain the same widgets as the original one; if it is created from scratch, it is going to be empty (as shown in the example below). Dashboard Widgets Widgets in DiamanteDesk provide quick access to required information, often reflects Report data. To add a new widget: Open the dashboard where a new widget shall be addded. Click [+ Add Widget] at the top right corner of the screen or add a new widget at the corresponding widget placeholder. The Dashboard Widgets pop-up screen opens. Select the required widget from the list and click Add . To add more widgets, repeat the procedure. You can move, edit and delete each of the added widgets by using corresponding icons at the top of the widget section. Note: All the DiamanteDesk Reports can be added to the dashboard as widgets. To learn more about Reports, follow this link . "},{"title":"Data Audit","baseurl":null,"url":"/en/latest/user-guide/data-audit.html","date":null,"categories":[],"body":"Every time a customer or administrator performs any action in the system, this action is added to the read-only event-action history log. Actions are entity properties that are created, updated or removed. Entities are users, branches, tickets, comments, attachments. Examples of actions stored in the action history log: A new user was created in the system A new comment was added An existing ticket was updated A branch was deleted To view all the actions made by the users in the system, move to System > Data Audit . The Data Audit screen opens. This screen contains the following information regarding the actions performed: Field Description Action This field defines the action performed by a user. The available actions are: Update , Create , Delete . Version Current field indicates how many actions has been created to this entity. For example, Entity Type This field indicates the entity type modified by a DiamanteDesk user. This can be any of the following entity types: User , Branch , Ticket , Comment , Attachment . Entity Name This field contains the name of a user, branch, ticket, comment or attachment. Entity ID Entity ID is a unique number of an entity in the system. Data All the data added to the entity where the action is performed is indicated in this field. For example, when a new ticket is created, the Data field contains such information as ticket subject, description, status, priority, reporter and the branch. Author The name of a person who performed current changes in the system is indicated in this field. Organization This field indicates an organization specified during DiamanteDesk or OroCRM installation. Logged at The date and time when the action is performed is shown in this field. Note: You can filter the data audit information according to the following criteria: Action Entity Type Entity Name Entity ID Author "},{"title":"Email Processing","baseurl":null,"url":"/en/latest/user-guide/channels/email-processing.html","date":null,"categories":[],"body":"DiamanteDesk supports 4 possible options of contacting a help desk team in order to create a new ticket and make a request or report an issue. Any user can do it through the Portal or Embedded Form , over the phone call or by sending an email to the support email account. All the emails that get to the support email account (or email alias) are retrieved by the DiamanteDesk system in order to create a separate ticket out of each received letter. Tickets are created either at a single default branch or in different branches depending on the specific support address from the email alias. Configuration Most of the medium and large size companies use support email alias addresses (such as support@companyname.com , info@companyname.com , hq@companyname.com , sales@companyname.com ) but in fact, all the emails that are sent to these addresses are stored at a single support account. DiamanteDesk allows converting all these emails into the support tickets automatically and these tickets can be distributed to different branches depending on the email address they were sent to. Alternatively, all the created tickets are stored at a single branch, defined as a default one at System > Configuration . To make sure that all customer requests sent to the defined email account are converted into tickets by the system, the email processing feature shall be configured properly. How to set up a support account Go to System > Configuration . On the System Configuration pane select the DiamanteDesk menu and Channels tab. The Channels screen opens. Configure the Email section to set up an email account. All the fields in the Email section are required fields and each of them has specific default settings. To use the default settings, select the Use Default check box in the corresponding field. To edit the configurations, clear the Use Default check box in the corresponding field and specify the necessary value. Field Description Server Address Specify the server address of the support account (for example, imap.google.com) Port Provide the port number. Hint: It is typically on port 143. But IMAP over SSL is usually on port 993. SSL Specify whether you want to use a secure connection (SSL) when retrieving your mail. Select Yes or No option. Username Provide the email account (for example, support@diamantedesk.com ). Password Provide the password to access email account. How to distribute tickets to different branches Tickets created from emails can be distributed to different branches depending on the email account they were sent to. For example, tickets sent to info@companyname.com can be added to the “Info” branch, same as tickets sent to support@companyname.com can be added to the “Support” branch. Branch logic helps to organize tickets in a way to keep track of the tickets according to a certain category and quickly find them in a system. This option can be configured directly at the Email Configuration section of the Branch configuration screen when the branch is created or open the required branch and click Edit . Provide the support email address relevant to this branch in the Support Address field (for example, it is a good idea to add all the tickets sent to sales@companyname.com to the “Sales” branch) and the customer domain name (for example, eltrino.com) to add all the emails sent from the email address with such customer domain to a specific branch. How to add tickets to a single branch To configure the email processing in a way when all the tickets created from emails are added to a single default branch, go to System > Configuration . On the System Configuration pane select the DiamanteDesk menu and Channels tab. The Channels screen opens. In the General section select a default branch for email processing. All the newly created tickets will automatically get to the specified branch. To set one of the existing default branches as default one, make sure that the Use Default check box is clear, click the down arrow in the Default Branch field and select the required branch from the drop-down list. If the Use Default check box is selected, the branch that was created in the system first becomes a default one. Note: A branch configured as a default one cannot be deleted. After all the necessary information has been provided, click Save Settings at the right top part of the screen. Run Email Processing You can also run and configure email processing from the console. Two commands are available: using IMAP protocol for email retrieval from a remote email server. php app / console oro : cron : diamante : emailprocessing : general This command may be configured through a crontab, allowing to send polls periodically on a given schedule it’s perfect for retrieving emails from the remote server. or using the email piping method: php app / console diamante : emailprocessing : pipe < / path / to / emails / stream This command is only applicable when DiamanteDesk and email server are installed on the same server machine. It includes piping method which has a remarkable advantage over a IMAP, as, when using piping, all the emails get to the system and are converted into tickets or comments immediately , unlike when using IMAP which sends polls to the remote server within scheduled time (at least 1 minute). This advantage allows to quicky react on customer requests or solve any issues on a real-time basis. "},{"title":"Embedded Form","baseurl":null,"url":"/en/latest/user-guide/channels/embedded-form.html","date":null,"categories":[],"body":"DiamanteDesk is designed to improve user experience for each of your present and future customer. In complex systems something may always go wrong and each user should always have a variety of options to contact your support team and let them know what should be fixed or changed. DiamanteDesk system offers several options to do that: by sending an email via a phone call, or through a web portal . Some of our Clients also prefer to embed a support form into their website. DiamanteDesk provides an ability to easily creating embedded forms on the third-party websites. Take a look at the picture below to see the initial form. Bacground color and font color, size and style can be determined according to the design of your website. This form includes fields for acquiring user name, Email used for informing a user on the status of a ticket creation and processing, the Subject field for a short precise description of a request or an issue, the Description field used for detailed specification of a reason to contact the support team and attachment field allowing users to add screenshots in case of UI issues. After a user clicks the Submit button, the message from the embedded form is automatically converted into a ticket. Create Embedded Form To create a new embedded form, head over to System > Integrations > Embedded Forms and click Create Embedded Form at the right top corner of the screen. Create Embedded Form screen opens. Fill out the fields to add a new embedded form to your website. Note: The required fields are marked with asterisk (*). Field Description Branch Select the branch where all the tickets converted from the embedded form should be created. This may be a separate branch created specifically for such tickets or a certain website, etc. To learn more about Branches , take a look at the corresponding section in DiamanteDesk User Guide. Title Specify the title that is going to be used to refer to current embedded form on the Client system. Form Type Currently only one form type is available. CSS This field contains default CSS, which corresponds to the initial form design. It can be edited according to the design of your website by changing border width, color, fonts settings, etc. Success Message This message is to be displayed on the website after the successful form submission. It has the following default message: Ticket has been placed successfully. After all the required fields are filled out, click Save and Close or Save at the right top corner of the screen. After the form is saved, it appears in the Embedded Forms grid. Edit / Delete Embedded Form Go to System > Integrations > Embedded Forms . Select the form that shall be edited/deleted from the list of available embedded forms. Click the form that shall be edited / deleted. The Embedded Form screen opens. Adding Embedded Form to the Website Go to System > Integrations > Embedded Forms . Open the form that should be added to the website. Select the Get Code tab to view the source code. Copy the code an add it to your website. "},{"title":"Filters","baseurl":null,"url":"/en/latest/user-guide/filters.html","date":null,"categories":[],"body":"Filters in DiamanteDesk are a great tool helping you to quickly find any records, tickets and users you are searching for within the system. Every data grid can be filtered according to each grid parameter. You can learn more about filtering parameters of every data grid in the corresponding section of the user guide: Branches ; Tickets ; Customers ; Users . Generally, the filter bar is located above the grid as shown in the picture below: Manage Filters By default, all the filter parameters are displayed at the filter bar as shown in the picture above, however, filter bar can also be configured according to your requirements. To hide / add filter parameters, click Manage Filters at the filter bar. A list of available filter parameters opens. Select / clear the required parameters to configure the filter bar according to your needs. Save Filter Query If you regularly use the same filter query, you can save it as a custom filtering option to pick out required records quickly and efficiently. In order to do that, once you applied all the filters and created a query that may be used later on, click Options > Save As above the filter bar. Provide the name of a new filter query and click Save , to quickly use it whenever needed. Once saved, it is going to be available as a predefined custom query. Click All above the filter bar and select it from the drop-down list to quickly access it. Multiple custom filter queries may be added for to save your time when sorting out the required data from the grids. Predefined Filter Query The Tickets grid contains several predefined filter queries to enable quick ticket search according to some of the highly required filtering options: New tickets picks out all the tickets with the New status value. My Tickets picks out all the tickets created by the account owner. My New Tickets picks out all the tickets created by the account owner with the New status value. My Open Tickets picks out all the tickets created by the account owner with the Open status value. "},{"title":"Installation Guide","baseurl":null,"url":"/en/latest/installation-guide/","date":null,"categories":[],"body":"DiamanteDesk may serve as an independent end-user application or as an extension for OroCRM. It will also be available for other CRMs in the nearest future. This section provides detailed instructions on various options of DiamanteDesk application installation. Requirements DiamanteDesk application was built using Symfony 2.3 framework and Oro Platform ; therefore, all the prerequisites listed as Symfony and Oro system requirements also refer to DiamanteDesk. DiamanteDesk Requirements: app/attachments folder needs to be writable; DiamanteDesk uses Composer version 1.x to manage package dependencies. To learn more about the composer and download it from the official website, follow this link ; MySQL database server with an empty database. Optionally, providing that your portal should be customized, your system shall comply with additional requirements: NPM package manager needs to be installed; Grunt needs to be installed (globally); Bower needs to be installed (globally). You can also check whether your system meets all the requirements from the command line. In order to do that, you should start with getting the application code from Github and install required libraries . Next, run the following command: php app / check . php Web Server configuration DiamanteDesk application was developed on the basis of the Symfony standard application so you can learn more about web server configuration recommendations here . Note: DiamanteDesk makes heavy use of HTTP methods in RESTful calls. The server can be configured to block some of them (for example, PUT, DELETE, etc.). However, this limitation should be removed, otherwise, a certain part of application will not function properly. Email Notification Configuration DiamanteDesk provides email notification functionality to automatically confirm user accounts, inform customers when new tickets are created or about any changes made to existing ones. This way a customer is notified whether his request is being processed. To make sure this functionality works properly, pay attention to email notification configuration: When installing DiamanteDesk via the web wizard, fill out the Mailer Settings section of the Configuration step. If DiamanteDesk was installed through the console, provide the required configuration data at the app/config/parameters.yml directory. Installation of a Standalone Application Step 1: Get the Stable Version of the Application Three options to get the latest stable version are available: Option 1: Using Git git clone -b 2.0 https://github.com/eltrino/diamantedesk-application Option 2: With the composer package manager php composer.phar create-project diamante/desk-application Option 3: Via a release archive The release archive is built for every stable release and it comes with the so-called “batteries included” as all the requirements are already installed and all the resources are built. Simply download the package, unzip it to the web-accessible directory on your server and follow the installation steps described in the following section . curl -O https://github.com/eltrino/diamantedesk-application/releases/download/2.0.0/diamantedesk-application-full-2.0.0.zip unzip diamantedesk-application.zip Note: Generally, we do not recommend using the last option and consider it to be a fallback option in case you have only FTP access to your server. Learn how to get the latest development version of the application here . Step 2: Install the Required Libraries Install the dependencies with the composer: php composer.phar install Step 3: Create a Database To install DiamanteDesk you also need to setup MySQL database server with an empty database that will be used later on. Use the following command: php app/console doctrine:database:create Step 4: Install the Application The application can be installed either using a console or via a web wizard. Select the most suitable version: Option 1: Installation Using a Console To run the installation of DiamanteDesk in a console mode, use the following command: php app / console diamante : install Additional commands may be required. The system will guide you through the process with questions and command options. If the system configuration does not meet the requirements, the install command provides corresponding messages. In case there are any issues, fix them and run the command again. Option 2: Installation Using Web Wizard To install the application through a web wizard, follow the link below: http://localhost/install.php After the DiamanteDesk installation screen opens, click Begin Installation . Firstly, installation wizard automatically checks system requirements. In case there are any issues, fix them and refresh the page. After all system configurations meet installation requirements, click Next . The next step of installation process is configuring the application. Provide the data for MySQL database connection , Mailer settings , System settings and Websocket connection if the fields are not filled out automatically. Note: If the application is installed for the first time, leave the Drop Full Database check box clear, if you reinstall the application, select this check box. Click Next and the installer will initialize your database. The list of tasks and the progress on their performance will be shown. If some of the operations are failed or skipped, check out the app/logs/oro_install.log file for errors. After you move on to the next step, you should provide such administrative information as company name, link to the application and administrative credentials. Click Install to finish the setup process. After the DiamanteDesk application is successfully installed the following message is displayed: Background Job Configuration DiamanteDesk requires that certain task should be executed in background. For this you will need to add several commands to your system job scheduler. */ 1 * * * * php app / console diamante : cron > / dev / null This will execute required command every minute. If you need you can change execution period to 5 minutes. This will decrease system reaction time to certain events (for example processing rules). Also if you would like to use Email channel its required to add one of the commands described in this section to your system job scheduler. Bundles Installation Development in progress. Oro Marketplace To learn about installation of DiamanteDesk on the basis of OroCRM, please follow this link . Docker Prebuilt Image To learn more on how to use Docker image, please follow this link . Latest Development Version The latest development version of DiamanteDesk application is also available for download. Disclaimer: Please keep in mind that this version is unstable and it may cause damage to your website or web store. We disclaim all responsibilitiy for data loss or any sorts of damage to your website or system caused by installation of the development version of application. Select one of the following options to get the development version of application: Option 1 : Clone the GitHub repository to get the source code git clone https://github.com/eltrino/diamantedesk-application Option 2 : Download using the composer php composer.phar create-project diamante/desk-application:dev-master Regradless of the option you’ve chosen, next you need to install the required libraries to proceed with installation process: php composer.phar install To get the latest version of the dependencies, execute the following command: php composer.phar update "},{"title":"Upgrade Guide","baseurl":null,"url":"/en/latest/upgrade-guide/","date":null,"categories":[],"body":"DiamanteDesk offers our customers a simple and reliable set of tools designed to take care of their clients, quickly solve any emerging issues and increase the overall customer satisfaction. DiamanteDesk system can be installed and used in one of the following ways: as a standalone application . Check out installation guide for detailed instructions on how to install DiamanteDesk as a standalone application that can be used with a web store or website of any kind using RESTful API . as an extension to OroCRM . Current version of DiamanteDesk is available only for OroCRM,however in the following versions it will also be available for other CRMs. Standalone Application Upgrade The following instructions are based on the assumption that the application code has been initially obtained from GitHub repository . First and foremost , before performing any steps aimed at help desk upgrading, make sure you have the latest complete backup of all databases and files of your current version, otherwise, you may end up losing the necessary data while upgrading the application. Step 1: Pull the changes from the DiamanteDesk repository using the following command: git pull Step 2: Checkout the latest stable or any of the previous versions of the application: git checkout <VERSION TO UPGRADE> Step 3: Execute the following command to upgrade the composer dependency: php composer.phar update --prefer-dist Step 4: Remove old caches and assets: rm -rf app/cache/* rm -rf web/js/* rm -rf web/css/* Step 5: Upgrade the application using this command: php app/console oro:platform:update --env=prod --force "},{"title":"FAQ","baseurl":null,"url":"/en/latest/faq/","date":null,"categories":[],"body":"Login is not working due to session storage issue Could be an issue that your session data not written into session storage. Such issue appears when your session storage configured to use files and those files placed on NFS volume. You should reconfigure to use different session storage (Redis for example) or avoid NFS in your setup. Error “Property … does not exist” during installation When you install or reinstall application make sure that caches have been flushed db is clean or you’ve selected appropriate option during install to drop it "},{"title":"Developer Guide","baseurl":null,"url":"/en/latest/developer-guide/","date":null,"categories":[],"body":"DiamanteDesk application is built using the Open Source software. We greatly appreciate any collaboration with our users and other developers, aimed at making our product better! This section of documentation is aimed at helping the contributors and providing detailed instructions on using DiamanteDesk API methods. Contributing Testing RESTful API guide Localizations "},{"title":"Integration","baseurl":null,"url":"/en/latest/integration/","date":null,"categories":[],"body":"Diamantedesk can easily become a help desk for your website, blog or online store by using a plugin or module in the variety of the content management systems. Here is a list of currently supported systems: Magento WordPress PrestaShop API Credentals "},{"title":"Channels","baseurl":null,"url":"/en/latest/user-guide/channels/","date":null,"categories":[],"body":"DiamanteDesk is a customer support system which functions either as a standalone application, extends CRM functionality or can be integrated with a number of content management systems. This software is designed to organize all incoming customer requests from all sources in a single place to ensure quick reply and reasonable solution to a problem, if any. Every user of a service supported by the DiamanteDesk system will have 4 available channels to contact the Help Desk team: by creating a request through a web portal ; via embedded forms on websites, online stores, blogs, etc.; by sending an email notification ; or via a phone call . Currently, first three options are available. Follow the links to learn more about submitting a request through a web portal , embedded forms or about email processing feature. "},{"title":"User Guide","baseurl":null,"url":"/en/latest/user-guide/","date":null,"categories":[],"body":"This documentation section contains the essential information covering all the available DiamanteDesk features and step-by-step instructions on every action performed by the end-user in the system. To learn more about each feature, follow the corresponding link from the list: Dashboards Branches Tickets Reports Customers Users Tagging Data Audit Filters Rules Channels "},{"title":"Welcome to DiamanteDesk","baseurl":null,"url":"/en/latest/","date":null,"categories":[],"body":" Helps listening to your customers. DiamanteDesk is an independent support ticket system which is designed to listen to your customers and quickly react to satisfy their needs. Currently, it can be easily integrated into the Oro platform but in the short run it will be available for other CRM systems. Our software enables big and small companies to support and guide their customers through emails , websites and phone calls. It is an easy and user-friendly tool designed to create tickets within the CRM and associate them with any customer from the system. In DiamanteDesk tickets can be assigned to specific users and administrators and grouped into Branches in order to organize the workflow and focus on high-priority issues and requests. "},{"title":"Localizations","baseurl":null,"url":"/en/latest/developer-guide/localizations.html","date":null,"categories":[],"body":"Avaliable localizations: French German Indonesian Ukrainian Russian Grab an appropriate translation of DiamanteDesk or join the community and help us to localize DiamanteDesk and maintain translation quality as a native speaker. "},{"title":"Magento","baseurl":null,"url":"/en/latest/integration/magento.html","date":null,"categories":[],"body":"Magento is a popular content management system that allows creating powerful e-commerce solutions. As a matter of fact, every e-commerce website should have a reliable support system that helps to quickly solve any issue, build strong customer relationships and improve overall user experience. Integrating DiamanteDesk with a website built with Magento may be the easiest solution for that. DiamanteDesk Magento module allows both administrator and any customer to create, edit and view tickets directly from a Magento powered e-commerce website. Installing DiamenteDesk Extension After installing DiamanteDesk integration module, it shall be configured at the Magento admin panel. Log in the Magento Admin Panel . In the navigation panel select System > Magento Connect > Magento Connect Manager . Re-enter your Magento Administration credentials to verify your permissions. Select automatic or manual installation and complete the following steps: Automatic Installation On the Magento Connect Manager screen follow the Magento Connect link in the Install New Extensions section. The extension marketplace opens. Enter DiamanteDesk in the Search for Extensions field and press Enter. Select the corresponding extension module from the search results. Click Get Extension . Manual Installation Option 1 - Installation via FTP: Upload the addthis folder to the root Magento directory. Head over to the Magento admin area and connect DiamanteDesk and Magento (see the Connecting DiamanteDesk to Magento section). Option 2 - Installation via archive: Download DiamanteDesk Module archive from Github. On the Magento Connect Manager screen, Extensions tab head over to the Direct package file upload section. Select the downloaded DiamanteDesk .zip file from the local machine. Click Upload . Provide your Magento Administration Credentials in the Manage Existing Extensions section below. After all the packages have been uploaded, move to Settings tab, and click Save Settings . Option 3 - Installation via Composer: Add Firegento repository to your composer.json . Add as dependency to your project using composer: php composer.phar require eltrino/diamantedesk-magento-extension Note: * Make sure that you clear the Magento caches to complete the installation of an extension. To learn more about cache management, follow this link . * If the module has been successfully installed, a DiamanteDesk tab will appear next to the System tab in the Magento navigation pane (see the picture below). Connecting DiamanteDesk to Magento After DiamantDesk module has been installed, we need to connect the actual help desk to Magento. In order to do that, complete the following steps: Acquire API credentials from your CRM. Get back to Magento Admin Panel. Go to System > Configuration > DiamanteDesk . DiamanteDesk configuration screen opens. Enter the User Name and Api Key from your CRM. Provide the link to the server in the Server Address field. Click Check Connection to make sure that the connection with a server has been successfully made. If the Api Credentials are correct, a new Branch Configuration field will be added to the DiamanteDesk configuration. Select a default branch from the Branch drop-down list. To learn more about branches in DiamanteDesk, see the Branches section in User Guide. Point out whether the customer support footer link to shall be displayed. Select Yes or No option in the Display footer link field. If the footer link is to be displayed, spcify the corresponding link to the customer support page in the field below. Click Save Config on the right top corner of the screen. DiamateDesk in Action After DiamanteDesk is installed, every customer registered in your Magento powered store can create a ticket and inform your support team on any issues directly from his account in My Tickets menu. Create a New Ticket in Magento Store To create a new ticket in Magento store, follow these steps: Log into or register in the Magento powered store. Navigate to My Tickets menu on the left side of the screen. Click Create Ticket at the right side of the screen. Create Ticket screen opens. Provide general idea of an issue/request in the Subject field. Select a branch related to the subject of your issue/request. Order ID is an optional field and it is invisible if the user hasn’t made any orders yet. Order ID may be selected from the drop-down list in case a user attempts to create a ticket related to a specific order. Provide the ticket subject and precise description of the ticket in the corresponding fields. Providing as many details as possible guarantees that the support team will handle your ticket properly. In case of some issues related to user interface, providing screenshots might be helpful as well. In order to add a screenshot or other files that may help to resolve issues or add some improvements, click Choose File below the Description field. Select the corresponding file(s) from your local machine and click Open . Once the file is attached, its name is shown near the Choose File button. Click Send Ticket to submit the newly created ticket to the support team. To cancel the process of ticket creation click Back . A customer can see all his tickets in My Tickets menu and check their status and priority to follow up on the ticket resolution progress. Adding Comments to a Ticket Once the comment is created, a customer and administrators can add comments to it. To add a comment to the ticket, a registere customer should navigate to My Tickets menu, select the required ticket and click View to open it, type in a comment into the Comment field and click Add Comment . Administrators respond to customer comments or tickets at the DiamanteDesk admin panel as described in this article . DiamanteDesk in Magento Admin Panel All DiamanteDesk Tickets All the administrators who have access to the Magento admin panel can view all tickets created for this store. To do that, navigate to DiamanteDesk tab in the general Magento navigation panel. DiamanteDesk Tickets screen opens. Administrators can create new tickets by clicking Create Ticket above the table listing all the previously created tickets. The procedure of ticket creation is identical to ticket creation procedure in DiamanteDesk admin panel, described in this article . Table containing all tickets previously created by store customers and administrators consists of the following fields: Field Description Key Ticket Key consists of the selected branch key and ticket sequence number and has next format { branchKey }-{ ticketSequenceNumber }. Subject Contains a short summary of a ticket provided by the ticket author. Email Displays email of a user who created this ticket. Prioroty Displays current priority of a ticket. All the tickets created from the Magento powered store have a Medium priority by default. Status Displays current status of a ticket. Date Displays the date when the ticket was created. Order ID This field is populated with the corresponding order ID number in case a user created a ticket related to some specific order. View in DiamanteDesk Additional ticket details, description or comments can be seen only at the DiamanteDesk admin panel. This link redirects a user to the specific ticket in the DiamanteDesk admin panel. Note: additional credentials are required to log in DiamanteDesk admin panel. Customer Tickets To view all tickets created by a specific customer: Navigate to Customers > Manage Customers . Select a required customer from the list. Customer Information screen opens. Select Tickets menu from the navigation pane at the left side of the screen. All customer tickets are shown there. Order Tickets To view all tickets related to a specific order: Navigate to Sales > Orders . Select a required order from the list. Customer Information screen opens. Select Tickets menu from the navigation pane at the left side of the screen. All order tickets are shown there. DiamanteDesk Contact Form DiamanteDesk contact form can be easily added to any section of an online store page as a widget. In order to do that, navigate to CMS > Widgets . Manage Widget Instances screen opens. To add a DiamanteDesk contact form widget, click Add New Widget Instance . The New Widget Instance screen opens. On the settings menu and Type field select DiamanteDesk Contact Form from the drop-down list. Specify corresponding value in the Design Package/Theme field. Click Continue . Note: Once you click Continue , Type and Design Package/Theme fields become uneditable. Now, specify Widget Instance Title in the corresponding field. Click Add Layout Update to display the contact form on the front of the online web store. Once finished, click Save or Save and Continue Edit . Check the store website to make sure the contact for is in the right position. "},{"title":"OroCRM","baseurl":null,"url":"/en/latest/integration/oro.html","date":null,"categories":[],"body":"DiamanteDesk offers seamless integration with the open-source OroCRM, providing efficient and simple ticket management tool. Therefore, DiamanteDesk can be installed as a help desk extension to OroCRM. The following guide describes various options of DiamanteDesk installation as an extension to OroCRM and all the functionality related to this integration. When installed on the basis of the OroCRM, DiamanteDesk functionality is available at the Desk top menu. This menu provides fast and easy access to the general functionality and data of the DiamanteDesk application, specifically to: Branches Tickets Reports Installation Prior to installing DiamanteDesk as an extension to OroCRM make sure that you have properly installed OroCRM. Installation via Oro Marketplace Navigate to System > Package Manager to install it from the OroCRM Marketplace. For the detailed instruction on how to add an extension to your OroCRM instance, follow this link . Installation via Composer As of 2.0.0 release we do not support composer installation. OroCRM integration package should only be installed via Oro Marketplace. DiamaneteDesk Contacts in OroCRM In the Oro platform all the contacts related to any business activities are saved at Customers > Contacts . Please refer to the Oro documentation to learn more about contacts in OroCRM. Due to the DiamanteDesk integration with Oro, when a customer registers on the support portal to make a request or report an issue regarding the supported entity (online store, blog, etc.), the provided credentials are added both to the DaiamnteDesk and to the OroCRM contacts. To learn how to configure this option, refer to the Configuration section of this article. When a user registeres on the portal, the system automatically scans the contact database by the existing emails. If none of the emails match the provided credentials, a new contact is created based on the data provided by the user. If an account with the same email has been previously registered in the system, the following warning message is displayed: The identical procedure occurs when OroCRM administartor creates a new DiamanteDesk user from the admin panel at Customers > Contacts > Create Customer . This feature can be disabled at System > Configuration > DiamanteDesk . Tickets in OroCRM When DiamanteDesk is installed on the basis of the OroCRM, administrators can view the tickets submitted to the system in the following sections: Desk > Branches . Tickets in the DiamanteDesk are grouped into the Branches . Creating separate branches enables our Clients to group tickets according to the requests of specific users, locations, issues or according to the Channel the ticket came from. Open the required branch to see all the tickets that belong to it. Desk > All Tickets . Tickets can be accessed directly at the Tickets section. They are not grouped according to any category on this screen an can be filtered according to the ticket Key , Subject , Branch , Assignee , Priority , Status , or time period when it was Created or Updated . Customers > Accounts . Account records referred to as Accounts in OroCRM are created to collect and analyze the information on customer activity of a person or group of people belonging to a certain company or organization. Administrators can view all the tickets created or updated by the users belonging to this account at the read-only Support Tickets grid in the Additional Information section. It displays general ticket information, such as ticket Key , Subject , Status , Reporter and date and time when it was updated. Customers > Contacts . The Customers screen contains information about all the customers who created tickets at the DiamanteDesk portal . Administrators can view all the tickets created or updated by the certain customer at the read-only Support Tickets grid in the Additional Information section. It displays general ticket information, such as ticket Key , Subject , Status and date and time when it was created. Configuration As previously mentioned, when DiamanteDesk is installed on the basis of OroCRM, all the contacts created through the DiamanteDesk support portal are automatically added to the OroCRM contact database. To learn more about contacts in DiamanteDesk, refer to the corresponding section of the User Guide . To configure this option, navigate to System > Configuration . The Configuration screen opens. From the System Configuration panel on the left select DiamanteDesk > Channels . The Channels screen opens. Head over to the Web section. To automatically create an Oro contact from the DiamanteDesk contact, select Yes option in the Create Contact Based On Diamante User and provide a user who is going to be responsible for this action in the Default Owner field. "},{"title":"Portal","baseurl":null,"url":"/en/latest/user-guide/channels/portal.html","date":null,"categories":[],"body":"When a customer attempts to leave a request through a web site supported by DiamanteDesk, the system redirects the user to a request module at http://example.com/web/app.php/portal/ . In order to create a ticket the user should either log in or register in case it is a first request. If you are new to the system, complete the following steps for registration: Click Registration at the bottom of the log in screen. Registration screen opens. Provide your first name, last name, email and password in corresponding fields. Note: Required fields are marked with asterisk (*). Click Continue . After all the provided credentials are successfully saved, the system shows the following message: Check your email box and follow a link there to confirm your registration. The system redirects you to the Sign In screen. User screen After a user logs into the system, he gets to a User Screen . Here is a screen that newly registered user should see: A previously registered user, who has created requests in past, can look through the table with all the previous requests showing their: Key . Key is an identifier of the branch, where the request has been created. This identifier is automatically generated by taking the first character(s) of every word in brunch name and converting them to upper case (for example, Green Daisy - GD, Retailing - RTL, etc.) Date field displays the date when the request has been created. Subject is a short summary of an issue occurred. Priority field displays the selected priority of the created ticket (Low, Medium or High). Status field indicates the stage of solution (New, Open, Pending, In Progress, Closed, On Hold). Add a New Ticket To create a new request, a user shall add a ticket by completing the following steps: Click the Plus button at the right corner of the screen. Add New Ticket screen opens. Provide a short summary of a ticket in the Subject field. Type in the detailed description of a ticket in the Description field. Select the priority level of your ticket from the Priority drop-down list. The available options are: Low for a non-urgent request or issue that does not have critical effect on a production process. Medium for an important non-urgent request. High for a critical issue or an urgent request. In case there is a file that shall be attached to the ticket (image or document), click Drop files here to attach and select the required file from your local machine. Once you provided all the necessary information, click Submit . How to swich user registration on/off Tickets can be also created without the required registration. To configure this option: Go to System > Configuration . On the System Configuration panel click DiamanteDesk to expose the available options and choose Channels . The Channels screen opens. Define whether a user shall complete the registration process before creating a new ticket in the Web section. By default, registration is always required. To change this configuration, make sure that the Use Default check box is clear and set the Registration required field to Yes or No option. To save the changes made, click Save Settings at the top right corner of the screen. "},{"title":"PrestaShop","baseurl":null,"url":"/en/latest/integration/prestashop.html","date":null,"categories":[],"body":"PrestaShop is a comprehensive e-commerce platform, allowing any business owner to quickly create an online shop for all sorts of products. But to ensure high quality service and build strong customer relationships, every e-commerce website should have a reliable support system. DiamanteDesk is a perfect solution for that. DiamanteDesk PrestaShop module allows both administrator and any customer to create, edit and view tickets directly on a PrestaShop e-commerce website. All the tickets can be grouped into Branches. To learn more about branches in DiamanteDesk, see the Branches section in User Guide. Installing DiamanteDesk Module Log in the PrestaShop Admin Panel. On the navigation panel head over to Modules > Modules and Themes Catalog for automatic installation. Automatic installation On the Modules screen head over to the PrestaShop Modules List . Enter DiamanteDesk in the Search Plugins field and press Enter. Click Install . Manual installation Option 1 - Installation via FTP: Upload the addthis folder to the modules/ directory. Head over to the PrestaShop admin area and connect DiamanteDesk and PrestaShop (please see the Connecting DiamanteDesk to PrstaShop section). Option 2 - Installation via archive: Download DiamanteDesk module for PrestaShop from Github. On the top right corner of the Modules screen click Add a new module . Select the downloaded zip file from your computer. Click Install Now and activate the plugin. Head over to Add a new module section. Click Choose a file and find a required file on your local machine. Click Upload this module . After the module has been successfully installed, head over to the PrestaShop Modules List . Enter DiamanteDesk in the Search Plugins field and press Enter. Click Install . Note: Make sure that you clear the PrestaShop caches to complete the installation of an extension. Connecting DiamanteDesk to PrstaShop After the module has been successfully installed, the DiamanteDesk module configuration page opens. The module shall be configured for the proper work of a help desk. In order to do that, complete the following steps: Acquire API credentials from your CRM. Get back to DiamanteDesk module configuration page at Prestashop . Provide the link to the server in the Server Address field. Enter the Username and Api Key from your CRM. Click Save . If the credentials are correct and the connection between PrestaShop and DiamanteDesk has been successfully made, a new Default Branch field will be added to the DiamanteDesk configuration. Select a default branch from the drop-down list. Click Save . "},{"title":"Reports","baseurl":null,"url":"/en/latest/user-guide/reports.html","date":null,"categories":[],"body":"DiamanteDesk provides its customers with the extensive set of reports allowing managers to monitor daily ticket activity, measure performance of the support department according to the average resolution time and detect emerging or existing issues in the system. Successful leaders know that revealing emerging trends far on advance is beneficial for overall customer satisfaction. Each report serves a specific purpose and allows analyzing your support team efficiency according to different criteria and company goals. To see the list of reports available in DiamanteDesk, log into the system and select the Reports top menu. Currently, DiamanteDesk offers 5 reports providing the essential data necessary to analyze the performance of a support team: Tickets by Priority Time of Responce Tickets by Channels Tickets by Branches Tickets Timeline Types of Reports Tickets by Priority This report provides the full picture of requests according to their priorities and allows focus on the critical ones. It also allows estimating the state of your system by analyzing the amount of urgent and high priority issues and focus on the general improvements, if necessary. This report also helps analyzing how customers estimate the issues they are dealing with while working with DiamanteDesk. The report shows the amount of submitted tickets with High , Low and Medium priority. To know the exact number of tickets per each priority submitted for a particular day, you may limit the chart display using the Range Selector below the chart and point to the day you are inetersted in. The number of tickets submitted per each priority is going to be shown at the opened pop-up. Time of Response Measure your efficiency by analyzing the average speed of responce to the newly created tickets. We believe that quick reaction is a key factor to achieve high customer satisfaction. Whether the issue is complex and urgent or small and insignificant, your customers want to see that their request is taken care of. The report shows the amount of tickets support agents responded to within one of the available time frames: 0-1 hours, 1-4 hours, 0-24 hours or more than 24 hours. To know the exact number of tickets responded within each time frame dufring a particular day, you may limit the chart display using the Range Selector below the chart and point to the day you are inetersted in. The data you are looking for is going to be diaplayed in the pop-up. Tickets by Channels Find out which of the ticket submission methods are most actively used in your system (emails, web portal, embedded form or via a phone call) and use this report to figure out the support agents workload and make decisions on staff increase or reduction. The report is presented as a line chart with each line displaying a set of data related to a certain channel of ticket submission. To see the exact number of tickets created on a certain day, point the line marker to preview a specific day on a chart. You may limit the chart display using the Range Selector below the chart. Tickets by Branches See how many tickets are created in each of the branches for the certain period or daily and use this data to analyze which branches are most actively used for ticket creation. The report is presented as a line chart with each line displaying a set of data related to a certain branch. To see the exact number of tickets created on a certain day, point the line marker to a specific day on a chart. You may limit the chart display using the Range Selector below the chart. Tickets Timeline Check how many tickets were opened and closed per day for a given time period to measure the efficiency of the support team. The report is presented as a line chart with each line displaying a set of data on the progress on new tickets , closed tickets and reopen tickets . To see the exact number of tickets created, closed or reopened at a certain day, point the line marker to a specific day on a chart. You may limit the chart display using the Range Selector below the chart. Note: All the reports available in the DiamanteDesk can be added to the dashboard as widgets. To learn more about widgets in DiamanteDesk, refer to this section. "},{"title":"RESTful API Guide","baseurl":null,"url":"/en/latest/developer-guide/restful-api-guide.html","date":null,"categories":[],"body":"DiamanteDesk REST APIs enable interaction between the application and other software products, such as websites, CRMs, content management systems and other applications. Using the DiamanteDesk REST APIs you can read, modify, add and delete the data directly in the helpdesk. To ensure secure access it is recommended to use HTTPS protocol for API requests. API Endpoints API endpoints define the connection point to your service, giving the external application access to DiamanteDesk data. API endpoints are prefixed with your domain name: http(s)://domainname/rest/api/{version}/desk/ Authentication DiamanteDesk uses WSSE authentication to ensure secure access to the third party applications via REST APIs. WSSE authentication in DiamanteDesk application, which is based on Symfony, is implemented by using this bundle . WSSE authentication is based on: a username; a nonce (created to avoid replay attacks); a timestamp; the password digest (In DiamanteDesk the password digest is represented as API Key. To learn how to generate API key, please check the API Credentials article in the Integration section of DiamanteDesk documentation). Format All the data in DiamanteDesk APIs is transmitted either in JSON or XML format with JSON being a default format. The format can be specified either: in the request header (Content-Type, Accept). Note: The MIME type shall be specified in header (application/json, application/xml). or specified in the URL. Pagination, Sorting, Filtering Pagination When a user performs a request to get a collection of entities or a certain entity, the data requested is returned in the response body. Depending on the requested items, objects or products, the list of results can contain thousands of results that should be paged through. The number of items per each page can be specified using page parameters. Paginated queries start at page 1 by default. For example, if you set the page limit to 10 items and you need to retrieve items from 21 to 30 your request should contain such parameters: limit=10 and page=3. When a user requests a list of certain entities, the server returns the results along with additional metadata, such as: the general amount of entities, shown at the X-Total HTTP header; the links to the connected pages in the Link HTTP header. There are 4 types of such links: Name Description next The URL to the following results page. last The URL to the last results page. first The URL to the first results page. prev The URL to the previous results page. Take a look at the example, containing such headers: HTTP / 1.1 200 OK Link: <http://hostname/api/rest/latest/desk/branches?limit=25&page=2>; rel=\"next\", <http://hostname/api/rest/latest/desk/branches?limit=25&page=5>; rel=\"last\" X-Total: 110 Sorting The results can be sorted according to the sort and order GET parameters, included in the URL. The sort parameter performs the sorting according to the property name of an entity, order parameter may be set either to asc (ascending) or desc (descending). Filtering Filtering can be performed according to any parameter of the corresponding entity. For example, to filter the branch by its key, add “key=PO” parameter to the URL. If the value is specified for string property, the search is performed for any occurrence, meaning the result will return PO, DPO, DPOD, etc. If the value is specified for numeric property the search is performed for equal value. To filter the results by the time when a certain entity or entities were created or updated, the following parameters should be used: createdBefore createdAfter updatedBefore updatedAfter Error Handling When the fault occurs within the application or on a server side, the server returns the corresponding status code followed by the message, indicating the root cause in the response body. Here are the status codes of the errors that may occur when working with DiamanteDesk application. Status Code Description 400 Validation failed and the request provided by the client was incorrect or distorted and the server could not understand it. 401 Such error occurs when a user attempts to access a page or resource that requires authentication. To resolve this issue, correct log in details shall be provided. 403 Authorization issue, meaning that a user has not been granted permission to access specific page or method. 404 This error means that the server could not process client request with the reason for that described in the error message. 500 Internal server error. This status code indicates that this is not a client-side issue, meaning that the problem occurred on the server side rather than in DiamanteDesk application. Take a look at the example of a 404 error below: POST /diamantedesk-1.0/web/api/rest/latest/desk/branches HTTP/1.1 { \" name\" : \" Test Branch\" , \" description\" : \" Test Description\" , \" tags\" : [ \" Test Tag\" , \" TB1\" ], \" key\" : \" BRANCHTEST\" } HTTP/1.1 404 Not Found { \" error\" : \" Branch key already exists. Please, provide another one.\" } Resources REST APIs are necessary when DiamanteDesk is integrated into another application and when interactions with the DiamanteDesk server shall be scripted. Note: Here are the values of the variables API methods: Variable Requirements {version} latest, v1 {_format} xml, json Branches GET: Retrieve the list of all branches GET /api/rest/ { version } /desk/branches Response Status Code: 200 (OK) Response body: [ { \" created_at\" : \" 2015-07-17T11:25:21+0000\" , \" description\" : \" branchDescription1\" , \" id\" : 1 , \" key\" : \" BRANCHB\" , \" name\" : \" branchName1\" , \" updated_at\" : \" 2015-07-17T11:25:21+0000\" }, { \" created_at\" : \" 2015-07-17T11:25:21+0000\" , \" description\" : \" branchDescription2\" , \" id\" : 2 , \" key\" : \" BRANCHC\" , \" name\" : \" branchName2\" , \" updated_at\" : \" 2015-07-17T11:25:21+0000\" } ] GET: Retrieve a branch by ID GET /api/rest/ { version } /desk/branches/ { id } Response Status Code: 200 (OK) Response body: { \" created_at\" : \" 2015-07-17T11:25:36+0000\" , \" description\" : \" Test Description\" , \" id\" : 11 , \" key\" : \" BRANCHTEST\" , \" name\" : \" Test Branch\" , \" updated_at\" : \" 2015-07-17T11:25:36+0000\" } Status Code: 404 (Not Found) Response body: { \" error\" : \" Branch loading failed. Branch not found.\" } POST: Create a new branch POST /api/rest/ { version } /desk/branches Parameters Name Type Description Note name string Required. Specify the name of a new branch. Minimum length is 2 letters. description string Enter the description of a new branch, if necessary. tags arrey of strings Optional Specify the tags appropriate for the new branch. To learn more about tagging in DiamanteDesk, please check the Tagging section in the User Guide section. key string Enter the key of a new branch. This key should be unique accross the whole system. The branch key must contain only letters. Minimum length is 2 letters. Request example: { \" name\" : \" Test Branch\" , \" description\" : \" Test Description\" , \" tags\" : [ \" Test Tag\" ], \" key\" : \" BRANCHTEST\" } Response Status Code: 201 (Created) Response body: { \" created_at\" : \" 2015-07-17T11:25:36+0000\" , \" description\" : \" Test Description\" , \" id\" : 11 , \" key\" : \" BRANCHTEST\" , \" name\" : \" Test Branch\" , \" tags\" : [ \" Test Tag\" ], \" updated_at\" : \" 2015-07-17T11:25:36+0000\" } PUT, PATCH: Update properties of a certain branch by its ID PUT|PATCH /api/rest/ { version } /desk/branches/ { id } Request example: { \" name\" : \" Test Branch PUT\" , \" description\" : \" Test Description\" , \" tags\" : [ \" Test Tag\" ] } Response Status Code: 200 (OK) Response body: { \" created_at\" : \" 2015-07-17T11:25:36+0000\" , \" description\" : \" Test Description\" , \" id\" : 11 , \" key\" : \" BRANCHTEST\" , \" name\" : \" Test Branch PUT\" , \" tags\" : [ \" Test Tag\" ], \" updated_at\" : \" 2015-07-17T11:25:36+0000\" } DELETE: Delete a branch by ID DELETE /api/rest/ { version } /desk/branches/ { id } Response Status Code: 204 (No Content) Response body: null Tickets GET: Retrieve list of all tickets GET /api/rest/ { version } /desk/tickets Response Status Code: 200 (OK) Response body: { \" branch\" : 1 , \" created_at\" : \" 2015-08-20T17:05:07+0000\" , \" id\" : 13 , \" key\" : \" BRANCH-13\" , \" priority\" : \" low\" , \" reporter\" : \" oro_1\" , \" source\" : \" web\" , \" status\" : \" new\" , \" subject\" : \" test subject\" , \" tags\" : [ { \" id\" : 1 , \" name\" : \" test-tag\" }, { \" id\" : 2 , \" name\" : \" test-tag2\" } ], \" unique_id\" : { \" id\" : \" 52429dbc757cbe09a73f8e841b7d5af5\" }, \" updated_at\" : \" 2015-08-20T19:42:04+0000\" , \" watcher_list\" : [ { \" id\" : 4 , \" user_type\" : \" oro_1\" } ] } GET: Retrieve the ticket by the given ticket ID GET /api/rest/ { version } /desk/tickets/ { id } Response Status Code: 200 (OK) Response body: { \" attachments\" : [], \" branch\" : 1 , \" comments\" : [], \" created_at\" : \" 2015-08-20T17:05:07+0000\" , \" description\" : \" <p>description</p>\" , \" id\" : 13 , \" key\" : \" BRANCH-13\" , \" priority\" : \" low\" , \" reporter\" : \" oro_1\" , \" source\" : \" web\" , \" status\" : \" new\" , \" subject\" : \" test subject\" , \" tags\" : [ { \" id\" : 1 , \" name\" : \" test-tag\" }, { \" id\" : 2 , \" name\" : \" test-tag2\" } ], \" unique_id\" : { \" id\" : \" 52429dbc757cbe09a73f8e841b7d5af5\" }, \" updated_at\" : \" 2015-08-20T19:42:04+0000\" , \" watcher_list\" : [ { \" id\" : 4 , \" user_type\" : \" oro_1\" } ] } Status Code: 404 (OK) Response body: { \" error\" : \" Ticket loading failed, ticket not found.\" } POST: Create a new ticket POST /api/rest/ { version } /desk/tickets Parameters Name Type Description Note branch integer Required. Specify a branch name where the ticket should be created. subject string Required. Enter a short description of a new ticket. description string Required. Enter the detailed description of a new ticket. status string Required. The available statuses are: New , Open , Pending , In progress , Closed and On Hold . priority string Required. Specify the priority of a new ticket. The available options are Low , Medium or High . source string Required. Every service user has 4 available options to contact the Help Desk team: by creating a request through a Web form or through the embedded form on a website (optional), as an Email notification, via a Phone call. Specify the corresponding source of a ticket. reporter string Required. The reporter is an administrator who can create a ticket for any customer. The name of a reporter must contain only letters. assignee integer Optional. Select a person responsible for ticket handling. Only OroCRM user can be selected. tags array of strings Optional. Specify the tags appropriate for the new branch. To learn more about tagging in DiamanteDesk, please check the Tagging section in the User Guide section. Request example: { \" branch\" : 1 , \" subject\" : \" Test Ticket from API\" , \" description\" : \" Test Description\" , \" status\" : \" open\" , \" priority\" : \" medium\" , \" source\" : \" phone\" , \" reporter\" : \" oro_1\" , \" assignee\" : 1 , \" tags\" : [ \" test1\" , \" test2\" , \" test3\" , \" test4\" ] } Response Status Code: 201 (Created) Response body: { \" attachments\" : [], \" branch\" : 1 , \" comments\" : [], \" created_at\" : \" 2015-07-31T11:26:51+0000\" , \" description\" : \" Test Description\" , \" id\" : 95 , \" key\" : \" BRANCHB-10\" , \" priority\" : \" medium\" , \" reporter\" : \" oro_1\" , \" asignee\" : 1 , \" source\" : \" phone\" , \" status\" : \" open\" , \" subject\" : \" Test Ticket from API\" , \" tags\" : [ \" test1\" , \" test2\" , \" test3\" , \" test4\" ], \" unique_id\" : { \" id\" : \" acee0fb73b9c1188472787b20a2760ae\" }, \" updated_at\" : \" 2015-07-31T11:26:51+0000\" , \" watcher_list\" : [] } PUT, PATCH: Update certain properties of the ticket by ID PUT, PATCH /api/rest/ { version } /desk/tickets/ { id } Request example: { \" subject\" : \" New test subject\" , \" tags\" : [ \" new test tag1\" , \" new test tag2\" ] } Response Status Code: 200 (OK) Response body: { \" attachments\" : [], \" branch\" : 1 , \" comments\" : [], \" created_at\" : \" 2015-07-31T11:26:51+0000\" , \" description\" : \" Test Description\" , \" id\" : 95 , \" key\" : \" BRANCHB-10\" , \" priority\" : \" medium\" , \" reporter\" : \" oro_1\" , \" source\" : \" phone\" , \" status\" : \" open\" , \" subject\" : \" New test subject\" , \" tags\" : [ \" new test tag1\" , \" new test tag2\" ], \" unique_id\" : { \" id\" : \" acee0fb73b9c1188472787b20a2760ae\" }, \" updated_at\" : \" 2015-07-31T11:26:51+0000\" , \" watcher_list\" : [ { \" id\" : 23 , \" user_type\" : \" oro_1\" } ] } DELETE: Delete the ticket by ID DELETE /api/rest/ { version } /desk/tickets/ { id } Response Status Code: 204 (No Content) Response body: null GET: Retrieve a ticket by the given ticket key GET /api/rest/ { version } /desk/tickets/ { key } Response Status Code: 200 (OK) Response body: { \" attachments\" : [], \" branch\" : 1 , \" comments\" : [], \" created_at\" : \" 2015-08-20T17:05:07+0000\" , \" description\" : \" <p>test description</p>\" , \" id\" : 13 , \" key\" : \" BRANCH-13\" , \" priority\" : \" low\" , \" reporter\" : \" oro_1\" , \" source\" : \" web\" , \" status\" : \" new\" , \" subject\" : \" test subject\" , \" tags\" : [ { \" id\" : 1 , \" name\" : \" test-tag1\" }, { \" id\" : 2 , \" name\" : \" test-tag2\" } ], \" unique_id\" : { \" id\" : \" 52429dbc757cbe09a73f8e841b7d5af5\" }, \" updated_at\" : \" 2015-08-20T19:42:04+0000\" , \" watcher_list\" : [ { \" id\" : 4 , \" user_type\" : \" oro_1\" } ] } Status Code: 404 (Not Found) Response body: } \" error\" : \" Ticket loading failed, ticket not found.\" } PUT, PATCH: Update certain properties of a ticket by the ticket key PUT, PATCH /api/rest/ { version } /desk/tickets/ { key } Request example: { \" subject\" : \" New test subject\" , \" tags\" : [ \" new test tag5\" , \" new test tag6\" ] } Response Status Code: 200 (OK) Response body: { \" attachments\" : [], \" branch\" : 1 , \" comments\" : [], \" created_at\" : \" 2015-07-31T11:26:51+0000\" , \" description\" : \" Test Description\" , \" id\" : 95 , \" key\" : \" BRANCHB-10\" , \" priority\" : \" medium\" , \" reporter\" : \" oro_1\" , \" source\" : \" phone\" , \" status\" : \" open\" , \" subject\" : \" New test subject\" , \" tags\" : [ \" new test tag5\" , \" new test tag6\" ], \" unique_id\" : { \" id\" : \" acee0fb73b9c1188472787b20a2760ae\" }, \" updated_at\" : \" 2015-07-31T11:26:51+0000\" , \" watcher_list\" : [ { \" id\" : 23 , \" user_type\" : \" oro_1\" } ] } DELETE: Delete the ticket by the ticket key DELETE /api/rest/ { version } /desk/tickets/ { key } Response Status Code: 204 (No Content) Response body: null GET: Retrieve the list of ticket attachments by ticket ID GET /api/rest/ { version } /desk/tickets/ { id } /attachments Response Status Code: 200 (OK) Response body: [ { \" id\" : 15 , \" created_at\" : \" 2015-07-17T11:25:53+0000\" , \" updated_at\" : \" 2015-07-17T11:25:53+0000\" , \" file\" : { \" url\" : \" http: \\ / \\ /localhost \\ /desk \\ /attachments \\ /download \\ /file \\ /450385ca08c7cfe5b507ad85f3a17428\" , \" filename\" : \" test.jpg\" }, \" thumbnails\" : { \" url\" : \" http: \\ / \\ /localhost \\ /desk \\ /attachments \\ /download \\ /thumbnail \\ /450385ca08c7cfe5b507ad85f3a17428\" , \" filename\" : \" 450385ca08c7cfe5b507ad85f3a17428.png\" } } ] GET: Retrieve ticket attachments by attachment ID GET /api/rest/ { version } /desk/tickets/ { ticketId } /attachments/ { attachmentId } Response Status Code: 200 (OK) Response body: { \" id\" : 15 , \" created_at\" : \" 2015-07-17T11:25:53+0000\" , \" updated_at\" : \" 2015-07-17T11:25:53+0000\" , \" file\" : { \" url\" : \" http: \\ / \\ /localhost \\ /desk \\ /attachments \\ /download \\ /file \\ /450385ca08c7cfe5b507ad85f3a17428\" , \" filename\" : \" test.jpg\" }, \" thumbnails\" : { \" url\" : \" http: \\ / \\ /localhost \\ /desk \\ /attachments \\ /download \\ /thumbnail \\ /450385ca08c7cfe5b507ad85f3a17428\" , \" filename\" : \" 450385ca08c7cfe5b507ad85f3a17428.png\" } } Status Code: 404 (Not Found) Response body: { \" error\" : \" Attachment loading failed. Ticket has no such attachment.\" } POST: Add attachment to the ticket POST /api/rest/ { version } /desk/tickets/ { ticketId } /attachments Request example: { \" attachmentsInput\" : [ { \" filename\" : \" test.jpg\" , \" content\" : \" R0lGODlhAQABAIAAAAUEBAAAACwAAAAAAQABAAACAkQBADs=\" } ] } Response Status Code: 201 (Created) Response body: [ { \" id\" : 15 , \" created_at\" : \" 2015-07-17T11:25:53+0000\" , \" updated_at\" : \" 2015-07-17T11:25:53+0000\" , \" file\" : { \" url\" : \" http: \\ / \\ /localhost \\ /desk \\ /attachments \\ /download \\ /file \\ /450385ca08c7cfe5b507ad85f3a17428\" , \" filename\" : \" test.jpg\" }, \" thumbnails\" : { \" url\" : \" http: \\ / \\ /localhost \\ /desk \\ /attachments \\ /download \\ /thumbnail \\ /450385ca08c7cfe5b507ad85f3a17428\" , \" filename\" : \" 450385ca08c7cfe5b507ad85f3a17428.png\" } } ] DELETE: Remove Attachment from the ticket DELETE /api/rest/ { version } /desk/tickets/ { ticketId } /attachments/ { attachmentId } Response Status Code: 204 (No Content) Response body: null GET: Retrieve personal data based on the provided ticket ID GET /api/rest/ { version } /desk/ticket/ { id } /assignee Response Status Code: 200 (OK) Response body: { \" email\" : \" example@example.com\" , \" name\" : \" asdasd dasdasd\" , \" id\" : \" oro_1\" } Comments GET: Retrieve the list of all comments GET /api/rest/ { version } /desk/comments Response Status Code: 200 (OK) Response body: [ { \" attachments\" : [ ], \" author\" : { \" email\" : \" emailaddress@server.com\" , \" name\" : \" Author Name\" , \" id\" : \" diamante_1\" }, \" content\" : \" commentContent1-1\" , \" created_at\" : \" 2015-07-17T11:25:22+0000\" , \" id\" : 1 , \" private\" : false , \" ticket\" : 1 , \" updated_at\" : \" 2015-07-17T11:25:22+0000\" }, { \" attachments\" : [ ], \" author\" : { \" email\" : \" emailaddress@server.com\" , \" name\" : \" Author Name\" , \" id\" : \" diamante_1\" }, \" content\" : \" commentContent1-2\" , \" created_at\" : \" 2015-07-17T11:25:22+0000\" , \" id\" : 2 , \" private\" : false , \" ticket\" : 1 , \" updated_at\" : \" 2015-07-17T11:25:22+0000\" } ] GET: Retrieve the comment by the given comment ID GET /api/rest/ { version } /desk/comments/ { id } Response Status Code: 200 (OK) Response body: { \" attachments\" : [ ], \" author\" : { \" email\" : \" emailaddress@server.com\" , \" name\" : \" Author Name\" , \" id\" : \" diamante_1\" }, \" content\" : \" Test Comment\" , \" created_at\" : \" 2015-07-17T11:25:22+0000\" , \" id\" : 101 , \" private\" : false , \" ticket\" : 1 , \" updated_at\" : \" 2015-07-17T11:25:22+0000\" } Status Code: 404 (OK) Response body: { \" error\" : \" Comment loading failed, comment not found.\" } POST: Add a new comment to the ticket. POST /api/rest/ { version } /desk/comments Parameters Name Type Description Note content string Required. Add your comment into this section. ticket integer Required. Provide the ID of a ticket where the comment is added. author string Required. Specify the name of a user who adds the comment to the ticket. The name of an author must contain only letters. ticketStatus string Required. Specify the status of a ticket after the new comment is added to it. The available statuses are: New , Open , Pending , In progress , Closed and On Hold . Request example: { \" content\" : \" Test Comment\" , \" ticket\" : 1 , \" author\" : \" oro_1\" , \" ticketStatus\" : \" new\" } Response Status Code: 201 (Created) Response body: { \" attachments\" : [ ], \" author\" : { \" email\" : \" emailaddress@server.com\" , \" name\" : \" Author Name\" , \" id\" : \" oro_1\" }, \" content\" : \" Test Comment\" , \" created_at\" : \" 2015-07-17T11:25:42+0000\" , \" id\" : 104 , \" private\" : false , \" ticket\" : 1 , \" updated_at\" : \" 2015-07-17T11:25:42+0000\" } PUT, PATCH: Update certain properties of the comment be the comment ID PUT|PATCH /api/rest/ { version } /desk/comments/ { id } Response Status Code: 200 (OK) Request example: { \" content\" : \" Test Comment Updated PUT\" , \" ticketStatus\" : \" closed\" } Response body: { \" attachments\" : [ ], \" author\" : { \" email\" : \" emailaddress@server.com\" , \" name\" : \" Author Name\" , \" id\" : \" diamante_1\" }, \" content\" : \" Test Comment Updated PUT\" , \" created_at\" : \" 2015-07-17T11:25:22+0000\" , \" id\" : 101 , \" private\" : false , \" ticket\" : 1 , \" updated_at\" : \" 2015-07-17T11:25:22+0000\" } DELETE: Delete a ticket comment by the comment ID DELETE /api/rest/ { version } /desk/comments/ { id } Response Status Code: 204 (No Content) Response body: null GET: Retrieve the information about the comment author based on the provided comment ID GET /api/rest/ { version } /desk/comment/ { id } /author Response Status Code: 200 (OK) Response body: { \" email\" : \" example@example.com\" , \" name\" : \" asdasd dasdasd\" , \" id\" : \" oro_1\" } GET: Retrieve all comment attachments GET /api/rest/ { version } /desk/comments/ { id } /attachments Response Status Code: 200 (OK) Response body: [ { \" id\" : 12 , \" created_at\" : \" 2015-07-17T11:25:27+0000\" , \" updated_at\" : \" 2015-07-17T11:25:27+0000\" , \" file\" : { \" url\" : \" http: \\ / \\ /localhost \\ /desk \\ /attachments \\ /download \\ /file \\ /61fcb86ab5a53db412b2f3823f8a20ac\" , \" filename\" : \" test.jpg\" }, \" thumbnails\" : { \" url\" : \" http: \\ / \\ /localhost \\ /desk \\ /attachments \\ /download \\ /thumbnail \\ /61fcb86ab5a53db412b2f3823f8a20ac\" , \" filename\" : \" 61fcb86ab5a53db412b2f3823f8a20ac.png\" } } ] Retrieve comment attachments by the attachment ID GET /api/rest/ { version } /desk/comments/ { commentId } /attachments/ { attachmentId } Response Status Code: 200 (OK) Response body: { \" id\" : 12 , \" created_at\" : \" 2015-07-17T11:25:27+0000\" , \" updated_at\" : \" 2015-07-17T11:25:27+0000\" , \" file\" : { \" url\" : \" http: \\ / \\ /localhost \\ /desk \\ /attachments \\ /download \\ /file \\ /61fcb86ab5a53db412b2f3823f8a20ac\" , \" filename\" : \" test.jpg\" }, \" thumbnails\" : { \" url\" : \" http: \\ / \\ /localhost \\ /desk \\ /attachments \\ /download \\ /thumbnail \\ /61fcb86ab5a53db412b2f3823f8a20ac\" , \" filename\" : \" 61fcb86ab5a53db412b2f3823f8a20ac.png\" } } Status Code: 404 (OK) Response body: { \" error\" : \" Attachment loading failed. Comment has no such attachment.\" } POST: Add attachment to the comment POST /api/rest/ { version } /desk/comments/ { commentId } /attachments Request example: { \" attachmentsInput\" : [ { \" filename\" : \" test.jpg\" , \" content\" : \" R0lGODlhAQABAIAAAAUEBAAAACwAAAAAAQABAAACAkQBADs=\" } ] } Response Status Code: 201 (Created) Response body: [ { \" id\" : 13 , \" created_at\" : \" 2015-07-17T11:25:34+0000\" , \" updated_at\" : \" 2015-07-17T11:25:34+0000\" , \" file\" : { \" url\" : \" http: \\ / \\ /localhost \\ /desk \\ /attachments \\ /download \\ /file \\ /338477dbcd9c4faae7584cda781be854\" , \" filename\" : \" test.jpg\" }, \" thumbnails\" : { \" url\" : \" http: \\ / \\ /localhost \\ /desk \\ /attachments \\ /download \\ /thumbnail \\ /338477dbcd9c4faae7584cda781be854\" , \" filename\" : \" 338477dbcd9c4faae7584cda781be854.png\" } } ] DELETE: Remove the attachment from the comment by the attachment ID DELETE /api/rest/ { version } /desk/comments/ { commentId } /attachments/ { attachmentId } Response Status Code: 204 (No Content) Response body: null Users GET: Retrieve the list of all users GET /api/rest/ { version } /desk/users Response Status Code: 200 (OK) Response body: [ { \" id\" : 1 , \" email\" : \" sdasdasd@asfasf.com\" , \" first_name\" : \" das\" , \" last_name\" : \" dasda\" }, { \" id\" : 2 , \" email\" : \" example@example.com\" , \" first_name\" : \" \\u0444\\u0456\\u0432\\u0444\\u0456\\u0432 \" , \" last_name\" : \" \\u0432\\u0444\\u0456\\u0432 \" } POST: Create a new user POST /api/rest/ { version } /desk/users Parameters Name Type Description firstName string Required. Provide the first name of a new user. lastName string Required. Provide the last name of a new user. email string Required. Add an email of a new user. This email is going to be used for email notifications and password recovery. Request example: { \" email\" : \" 1437135532dummy-test-email-address@test-server.local\" , \" firstName\" : \" John\" , \" lastName\" : \" Dou\" } Response Status Code: 201 (Created) Response body: { \" id\" : 11 , \" email\" : \" 1437135532dummy-test-email-address@test-server.local\" , \" first_name\" : \" John\" , \" last_name\" : \" Dou\" } GET: Retrieve user data GET /api/rest/ { version } /desk/users/ { email } / Response Status Code: 200 (OK) Response body: { \" id\" : 11 , \" email\" : \" 1437135532dummy-test-email-address@test-server.local\" , \" first_name\" : \" John\" , \" last_name\" : \" Dou\" } Status Code: 404 (Not Found) Response body: { \" error\" : \" User not found.\" } PUT, PATCH: Update properties of a certain user by its ID PUT|PATCH /api/rest/ { version } /desk/users/ { id } Request example: { \" email\" : \" 1437135532dummy-test-email-address@test-server.local\" , \" first_name\" : \" John\" , \" last_name\" : \" Second\" } Response Status Code: 200 (OK) Response body: { \" id\" : 11 , \" email\" : \" 1437135532dummy-test-email-address@test-server.local\" , \" first_name\" : \" John\" , \" last_name\" : \" Second\" } DELETE: Delete the user by id DELETE /api/rest/ { version } /desk/users/ { id } Response Status Code: 204 (No Content) Response body: null "},{"title":"Rules","baseurl":null,"url":"/en/latest/user-guide/rules.html","date":null,"categories":[],"body":"Rules determine automated system behaviour governed either by other events or based upon the predefined frequency. Example: When a new ticket is created and the Subject field contains “ASAP” acronym or other keywords or phrases implying urgency, the priority of a ticket should be automatically set to High to make sure it will be taken care at the earliest opportunity. This helpful feature offers the ability to configure system behavior quickly and easily, without involving developers. Rules can be created / configured from the respective top menu item, shown in the picture below. This feature relays on system time-based job scheduler. Its required to add certain command to your system job scheduler, for example cron on UNIX-like systems. So please do not forget to configure this like described in installation chapter. Working principles of Rules are related to: time triggered , event triggered system behavior. Both types of these rules should have predefined Conditions and Dependent Actions , but the major difference between them is that in case of “event triggered rules”, the resulting action is performed right after one or several conditions are met, and with the “time triggered rules” conditions might be met, but the defined action is only going to be performed after the system “scans” after specified period of time. Rules Logic (Examples) Each rule consists of Conditions and Dependent Actions . You are not limited to setting a rule with a single condition or single action. Instead, you are free to define complex conditions or group(s) of conditions and as many dependent actions as required. Let’s review the following example : If there are tickets with status “in progress” for more than 48 hours, we want them to get a higher priority and be assigned to a specific Administrator. In this case, we can create a Time triggered rule and define how often do we want to scan the system to find such tickets. This is how such rule is going to look: Nested Conditions or Groups of Conditions DiamanteDesk is capable of performing actions triggered by multiple conditions or even complex groups of conditions. Let’s take a look at the example below: In this case we have 2 groups of conditions and if ANY of them are true, the action is going to be performed: Group 1 OR Group 2 Ticket is updated AND its property is “High” Ticket was created from the “Phone” request AND has been added to the “Purchase Orders” branch By specifying multiple conditions or groups of conditions, system behaviour may become remarkably automated and save time of your consultants. Creating a Time Triggered Rule Time triggered rules can be applied to tickets only. To create a new rule, triggered within ceratain time intervals, follow these steps: 1) Go to Rules > Time Triggered . A list of All Time Triggered Rules previously created in the system opens. 2) At the top right corner click Create Time Triggered Rule . The Create Rule page opens. 3) Provide the following general information: Field Description Name Define a meaningful name of the condition. We recommend mentioning conditions and actions in the name to avoid confusion. Status Define whether this rule should come into full force right after being saved. This setting is usually set to “Active” by default, but if you want to enable it later, choose “Inactive” from the drop-down list. Frequency Choose how often the system should be checked to find the tickets matching the specified conditions. Target Ticket only. 4) Define the Conditions . The condition part is a logical test that, if satisfied or evaluates to true, causes the action to be carried out. Here are the things you want to keep in mind when adding conditions: You may add several conditions or groups of conditions by clicking Add Conditions or Add Group , respectively. If more than one condition or more than one group of condition is added, you should define whether All of these are true or Any of these are true 5) Define the Actions which should follow if conditions are met. 6) At the top right corner of the screen click Save and Close . Creating an Event Triggered Rule Event triggered rules can be applied to tickets and comments . To define a dependent action, triggered by some other event in the system: 1) Go to Rules > Event Triggered . A list of All Time Event Rules previously created in the system opens. 2) At the top right corner click Create Event Triggered Rule . The Create Rule page opens. 3) Provide the following General Information : Field Description Name Define a meaningful name of the condition. We recommend mentioning conditions and actions in the name to avoid confusion. Status Define whether this rule should come into full force right after being saved. This setting is usually set to “Active” by default, but if you want to enable it later, choose “Inactive” from the drop-down list. Target Ticket or comment. 4) Define the Conditions . The condition part is a logical test that, if satisfied or evaluates to true, causes the action to be carried out. Here are the things you want to keep in mind when adding conditions: You may add several conditions or groups of conditions by clicking Add Conditions or Add Group , respectively. If more than one condition or more than one group of condition is added, you should define whether All of these are true or Any of these are true . 5) Define the Actions which should follow if conditions are met. 6) At the top right corner of the screen click Save and Close . "},{"title":"Tagging","baseurl":null,"url":"/en/latest/user-guide/tagging.html","date":null,"categories":[],"body":"DiamanteDesk administartors can tag Branches or Tickets in order to label them in a certain way. The process of ticket tagging is identical to branch tagging. The main purpose of tags in DiamanteDesk is to give administrators the ability to easily view similar branches. When two or more branches are given the same tag, administrators can view all branches grouped together. When administrator clicks a certain tag, he can also view every single branch with the same tag. Note: Tags are only visible for system administrators, regular users can not see them. Adding Tags Tags can be added either when a new branch is created or whenever such need arises: On the Branch screen move to Tags field. If no tags have been assigned to this branch, the field is marked as Not tagged . Select an existing tag or create a new one. We add a Business tag as an example. Note: Each branch can be labeled with the unlimited amount of tags. Search by Tags To perform the search by tags, two options are available in the system: Click Search button on the top panel of the screen. A Search drop-box opens. Select the required category from the drop down list (in our case it is Tag ). Enter the tag name and click Go . Click the tag label in on the Branch screen and the search will return all categories, such as branches, accounts and contacts tagged as Business . Select the required category on the left side of the screen (in our case it is Branches ). Now the search displays all the branches tagged as Business . "},{"title":"Testing","baseurl":null,"url":"/en/latest/developer-guide/testing.html","date":null,"categories":[],"body":"Software testing is an essential part of the development process. Deliberate and thorough testing ensures that software will work properly and our Clients will not face unforeseen consequences when using it. DiamanteDesk team pays proper attention to testing, both unit and functional , and we rely heavily on PHPUnit, a software suite designed for testing, which is commonly accepted as an industrial standard for quality assurance. DiamanteDesk application offers all the required tests bundled with the most reliable version of PHPUnit. Unit Testing Unit testing is intended to test individual software components in strict isolation from the live system resources, thus, ensuring application integrity. Unit testing utilizes the “mock” object approach to test the behavior of each component in different cases without affecting any other part of the system. DiamanteDesk Unit Test Suite is available in each bundle and can be run from the command line. The way of calling the PHPUnit binary may vary on your setup. The following examples are be based on the assumption that your PHPUnit is installed globally, the DiamanteDesk application is installed via the Composer, and the source code resides in the vendor/diamante folder of your server’s document root. To run the test suite, issue the following command: bash phpunit -c vendor/diamante/ { BundleName } /phpunit.xml.dist vendor/diamante/ { BundleName } /Tests Note: {BundleName} is a placeholder for a name of the bundle you want to test, e.g. DeskBundle, ApiBundle, FrontBundle, etc. The output consists of the test results, including the general number of tests run, assertions made and the number of failed and skipped tests or tests containing errors. Functional Testing Functional testing is aimed at testing the application integrity within the current setup. Depending on the incoming request parameters it may include the database interaction, file system operation and result processing testing, which is a reason why functional testing is commonly referred to as Integration testing. The best practice for functional testing is using the test database filled with randomly generated test data (also known as fixtures). The testing engine mimics the “real” request via different internal tools and analyzes the systems response. Moreover, the built-in tools allow building complex testing scenarios with different parameters which is a great way to test system behavior and analyze system response on our interaction with different UI elements; for example, when clicking buttons and filling out the forms on the web pages. DiamanteDesk Unit Testing Suite is available by issuing the following command: bash phpunit -c vendor/diamante/ { BundleName } /Tests/Functional/phpunit/xml.dist vendor/diamante/ { BundleName } /Tests/Functional The output of the command execution is similar to the unit testing output. Note: We highly recommend setting up a separate database for the proper software testing. How to Setup Testing Environment Set up your test environment parameters by creating the following file: app/config/parameters_test.yml The structure of this file is similar to your prod environment one. Reinstall DiamanteDesk, using –env=test flag if required (depends on your setup). Please refer to the Installation Manual for more details. Running the Suite of Functional Tests When the command described above is issued, the following happens: There is an option in the configuration file, specifying the default bootstrap.php file, required to inform the application on its environment. The script in that file runs every time you run the test suite. Utilizing this file makes it possible to provide the test database with the test data (fixtures) that shall be processed. When fixtures are being loaded, the existing tables shall be truncated in order to get rid of the data from the previous test. This shall be done every time we run the test suite to ensure getting consistent results. Next, the new set of automatically generated data shall be loaded. Eventually, the test suite launches the first test and continues the process as specified in the phpunit.xml.dist file. Adding New Tests and Test Data DiamanteDesk application is open for contributing, so if you want to add a new functionality to the system, we strongly recommend writing unit/functional tests for your bundle and testing it against the existing code to ensure the app integrity. All the newly added functionality that cannot make it through the test suite can’t get checked into DiamanteDesk. Here are a few rules we follow when testing DiamanteDesk application: Unit tests are placed in the Tests folder of your bundle. Functional tests are placed in the Tests/Functional folder. Each set of tests has it’s own config. Functional test suite is required to have a bootstrap script for correct autoloading. Fixtures are added via placing your data generator class into the DataFixtures/Test folder. Each file name, which contains tests, has to end with Test.php . These simple recommendations enable seamless integration of new tests into the existing test suites. "},{"title":"Tickets","baseurl":null,"url":"/en/latest/user-guide/tickets.html","date":null,"categories":[],"body":"DiamanteDesk offers a great way to improve customer experience by easily receiving, reassigning and taking care of any Client requests presented as tickets . Tickets in DiamanteDesk can be created through one of the following channels: through the web portal ; via embedded forms on websites, online stores, blogs, etc.; via processing email requests sent to the support email address; by the admin users via the admin panel. Tickets in the Admin panel can be viewed and created from: the Branches page (see Branches section); the Tickets page. Ticket Filters All tickets in the system can be filtered according to each of the parameters described in the table below. To learn more about filtering in DiamanteDesk, follow this link . Filter Description Key Enter the required branch key and click Update . Ticket Key consists of the branch key and ticket sequence number and has next format { branchKey }-{ ticketSequenceNumber }. Subject Provide the summary of a ticket in this field. Branch Select the required branch from the drop-down list and click Update . Assignee To filter the tickets assigned to a specific person, enter the name of that person into the Assignee field. Priority Set the filter to Low , Medium or High priority to seed out the tickets of the unnecessary priority. Status To filter the tickets according to their priorities, click the down arrow and select one or several statuses. The available statuses are: New , Open , Pending , In progress , Closed and On Hold . Created Select the date range when the tickets could be updated either from a drop-down calendar or by selecting one of the available variables ( Now, Today, Start of the week, Start of the month, Start of the quarter, Start of the year ). Updated Select the date range when the tickets could be updated either from a drop-down calendar or by selecting one of the available variables ( Now, Today, Start of the week, Start of the month, Start of the quarter, Start of the year ). Create a New Ticket To create a new ticket, complete the following steps: Click Create Ticket at the top right corner of the screen. The Create Ticket screen opens. Provide all the relevant information necessary to create a new ticket: Field Description Branch Click the down arrow to choose a branch where this ticket should be created. Subject Provide the topic of an issue in this field. Status Select the status of a ticket. The available statuses are New , Open , Pending , In Progress , Closed and On Hold . When the ticket is just created, its status is normally set to New or Open . Priority Set the priority of the ticket according to the urgency of the issue occurred. The available priority options are Low , Medium or High . Source Specify the channel used to submit this ticket. The available options are: through Web , Phone or Email . To learn more about channels of ticket submitting, follow this link . Reporter Reporter is a user who created a ticket or who is in charge if it. This user receives notifications whenever the ticket status or priority changes. By default, the reporter is an owner of the account. To change the reporter, click the List button and select the corresponding user. Assignee Assignee is a person responsible for the ticket workflow. To change the assignee, click the List button and select the corresponding user. File In case there is a file that shall be attached to the ticket (screenshot or document), click Choose file and select the required file from your local machine. Tags Add tags for the further quick ticket search and classification. Follow the link to learn more about tagging in DiamanteDesk. Provide the detailed description of a ticket in the Description field. If relevant, describe the steps to reproduce the bug/error. Click Save or Save and Close at the right top corner of the screen for a corresponding action. Ticket Comments Once the ticket is created and successfully saved in the system, customers can comment them from the portal and Admin users can reply from the Admin panel either publically or privately. Comments on the Portal Whenever DiamanteDesk customer needs to add more information about the issue or make a request about the previously created ticket, the comment to this ticket can be added on the portal. This comment automatically becomes available at the admin panel, updating admin users with new information/requests/issues occurred. Admins can comment tickets directly from the Portal as described below. Private Comments on the Admin Panel To add a comment to some ticket from the Admin panel, open the required ticked, scroll down to the very bottom of the page and click Comment . The Add Comment screen opens. Field Description Content This field contains the comment body. Ticket Status Specify whether the ticket status should be changed. Attachments Attach screenshots clarifying or confirming information provided in the content field. Private If this checkbox is selected, this comment is going to be available only on the Admin panel. If the checkbox is cleared, it is going to be available at the Admin panel as well as on the Portal. Notifications Email Notifications is a DiamantDesk feature that sends automatic emails to the ticket creator and Assignee when the ticket is created or its status changes. This way, a customer is notified whether his request is being processed. When the ticket is created, a Reporter and Assignee get the following emails, informing them on ticket details (such as Branch, Subject, Priority, Status and Source): When the status of a ticket changes, the reporter and assignee get the respective email as well. Configuring Notifications This functionality can be configured according to the customer needs at System > Configuration : On the System Configuration pane click DiamanteDesk to expose the available options and choose Notifications . To use the default settings, select the Use Default check box in the Email Notifications field. To edit configurations, clear the the Use Default check box and set the Enable Email Notifications field to Yes or No option. To save the changes made, click Save Settings at the top right corner of the screen. Server Setup The mailer settings for emails and notifications are usually configured during DiamanteDesk installation. To learn more about the process of installation, navigate to the Installation Guide section of the documentation. To make sure that server parameters are configured correctly or you need to change them, define required configuration details in the app/config/parameters.yml file. If you need more information on how to perform configurations in the app/config/parameters.yml file, follow this link . Watchers Each of the tickets can be assigned to a specific user to make sure that a given issue is solved quickly and efficiently. But in order to have more control over certain high priority issues, a new Watchers feature has been added. A Watcher is a person who gets an email notification every time a status, priority or other ticket information changes. When the ticket is created, a Reporter (the person who created a ticket) and an Assignee (the person to whom the ticket is assigned) automatically become Watchers . If the ticket is created by the admin user, he automatically becomes a ticket watcher as well. Adding Watchers to the Ticket Watchers can be added to the ticket in one of the following ways: By Customers via Email In case the ticket is created from the email through email processing , the email sender and all the users from CC (if any) become watchers and receive email notifications each time the ticket content, status or priority is changed. By Customers via Portal To add watchers to the ticket via the portal, complete the following steps: Log into the Portal. Create a new ticket. To get the detailed instructions on how to create ticket via the portal, please refer to this section . Once the ticket is submitted, the screen with ticket description and editing options is opened. At the right side of this screen in the Watchers section click Add Watcher to add a person or several people who will be able to control the ticket workflow. The Add Watcher pop-up opens. Specify the email of a person you would like to make a watcher for this ticket and click Add . If this email has been previously registered in DiamanteDesk, the system will recognize this user and add person’s first an last name to the list of watchers. If no matching account has been found, a new customer is created. An email confirmation is sent to a person whose email was provided at the Add Watcher screen, notifying him on the new role granted. By Admins via Admin Panel Admin user can add or remove certain users from the list of ticket watchers if he has respective edit permissions. To follow the changes made in a certain ticket or add other customers/administrators to the list of Watchers, Admin should perform the following steps: Log into the DiamanteDesk Admin panel. Open the required ticket. To to be aware of the changes made to the ticket, click Watch on the option panel at the top of the screen. To add another person to the Watchers list, click Add Watcher on the option panel. The Add Watcher screen opens. Enter the name of a required user or click a list button and select a user from the list of available users. "},{"title":"Users / Roles / Groups","baseurl":null,"url":"/en/latest/user-guide/users.html","date":null,"categories":[],"body":"User Management serves to create new admin users in DiamanteDesk or to review/edit information about the existing ones. Each user has a certain role, access settings and belongs to one of the existing groups, defining his default permissions in the system. To review the list of all users in the system head over to System > User Management > Users : Create a New User To create a new user profile in the DiamanteDesk system, head over to System > User Management > Users and click the Create User button at the right top corner of the screen or go directly to System > User Management > Create User . After you get to the Create User screen, provide the general user information. Field Description Owner Define a business unit a User belong to. Status Account can be either Active or Inactive . Username , Password Create a Username and Password that will be used by a newly created user to log in. Re-Enter the password in the following filed to make sure you typed it in correctly. Name Prefix Optional. Mr, Ms, etc. Name Suffix Optional. Jr., Sr., PMP, etc. Birthday Select the Birthday from the drop-down calendar in the corresponding field Avatar Add a profile picture from your local machine. Send an Email Invitation Choose whether you want a user to receive an welcoming email after you save his/her profile. Field Description Primary Email Enter the user’s email here. This email is going to be used for email notifications and password recovery. Click Add Another Email in the Emails field to add additional email in case the primary one is not available for any reason. Tags Tagging functionality is identical throughout the system. To learn more about tagging, follow this link Field Description Title Provide the Position of a newly created user in the section for Additional information. Groups and Roles Select the Groups and Roles the newly created user will belong to. This selection will define user access rights and permissions. You can create/edit/delete Roles and Groups at System > User Management > Roles / Groups respectively. More than one group or role may be selected for one user. Edit User Account To edit user account in the DiamanteDesk: Go to the list of all users in the system at System > User Management > Users . Select the user account that shall be changed and open it. At the top right corner of the screen click Edit . Perform the required changes. Click Save and Close or Save at the right top corner of the screen. My Account To review your account information, click your username > My User at the right top corner of the screen. My account details screen opens. To edit your account information, click Edit at the right top corner of the screen, perform the necessary changes and click Save . User Roles When a new user is created within DiamanteDesk, he is assigned with a certain role that determines a set of his permissions and access rights, defining actions a user is allowed to perform. Each user may have one or several roles. To look through the list of available user roles head over to System > User Management > Roles . You can also create new roles from this screen. Open some role to see permissions assigned to it. Permissions Each role defines the list of actions that may be performed to a certain entity. Action Description View Allows viewing the content of the entity records, grid items. Create Allows creating new records for defined entities. Edit Allows editing entity records, grid items. Delete Allows deleting entity records, grid items. Assign Allows assigning the entity records to a different owner. Permissions may be defined by selecting one of the following options for each entity and the actions that may be performed there. Option Description None None of the users with this role are able to perform the action. User Allows the owner-user to perform the corresponding action. Business Unit Allows all the users within a business unit to perform the action. Division Allows all the users within a division of a business unit to perform the action.. System Allows all the users with the same role to perform the corresponding action. Create a New User Role Navigate to System > User Management > Roles . Click Create Role at the top right corner of the screen. The Create Role screen opens. Provide the role name, preferably defining the group of users, who will be granted certain permissions (for example, Administrators, Users, etc.) in the General tab. Grant certain permissions by selecting the corresponding options for each action in all entities. The Capabilities tab consists of all sorts of functions that may be available for the users. Define what functionalities are available for a user with this role. Users with different roles will see system functionality differently and can perform different actions, accordingly. Choose the existing users that will be granted this role by selecting the check boxes in the corresponding rows. Click Save or Save and Close to proceed. User Groups A user group is a collection of user accounts having the same core responsibilities (for example, Administrators, Marketing, Sales). Each user may belong to one or several groups. To look through the list of available User Groups head over to System > User Management > Groups . Create a New User Group Go to System > User Management > Groups . Click Create Group at the right top corner of the screen. The Create Group screen opens. The Owner field is automatically filled with Main value by default. Provide the general name of the group in the Name field. Choose the members belonging to this group by selecting the check boxes in the corresponding rows. Click Save or Save and Close to proceed. "},{"title":"WordPress","baseurl":null,"url":"/en/latest/integration/wordpress.html","date":null,"categories":[],"body":"DiamanteDesk plugin allows adding support help desk to your blog or website. Any comments from the website may be converted into tickets and grouped into separate branches according to the topic or an account. Installing DiamanteDesk Plugin for WordPress Log in the WordPress Admin Panel. On the navigation panel head over to Plugins > Add New . Automatic installation Go to WordPress Plugin Directory . Enter DiamanteDesk in the Search Plugins field and press Enter. Click Install Now and activate the plugin. Manual installation Option 1 - Installation via FTP: Upload the addthis folder to the /wp-content/plugins/ directory. Activate the plugin through the Plugins screen in your WordPress admin area. Option 2 - Installation via archive: Download DiamanteDesk plugin for WordPress from Github. On the Add Plugin screen click Upload Plugin . Select the downloaded zip file from your computer. Click Install Now . To install the plugin, WordPress needs to access your web server. Enter your FTP credentials to proceed. Note: If you do not remember your credentials, contact your web host. 5. Click Proceed . If the plugin has been successfully installed, you shall see the following message: 6. Click Activate Plugin . Connecting DiamanteDesk to WordPress After the plugin has been successfully installed, the DiamanteDesk menu item shall appear in the Wordpress admin menu. It shall be configured for the proper work of a help desk. In order to do that, complete the following steps: Acquire API credentials from your CRM. Get back to WordPress Admin Panel. Select DiamanteDesk menu item from the WordPress admin menu. DiamanteDesk plugin settings screen opens. Provide the link to the server in the Server Address field. Enter the Username and Api Key from your CRM. Select the number of tickets which is going to be displayed in the admin widget. Click Test Connection to make sure that the connection with a server has been successfully made. If the credentials are correct and the connection between WordPress and DiamanteDesk has been successfully made, a new Default Branch field will be added to the DiamanteDesk configuration. Select a default branch from the drop-down list. Click Save Changes . "}]}